<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>[DASCTF2024八月开学季!] Crypto</title>
      <link href="/2024/08/28/DASCTF2024%E5%85%AB%E6%9C%88%E5%BC%80%E5%AD%A6%E5%AD%A3-Crypto/"/>
      <url>/2024/08/28/DASCTF2024%E5%85%AB%E6%9C%88%E5%BC%80%E5%AD%A6%E5%AD%A3-Crypto/</url>
      
        <content type="html"><![CDATA[<h2 id="ezsquares">EZsquares</h2><p>题目描述： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p=getPrime(<span class="number">512</span>)</span><br><span class="line">q=getPrime(<span class="number">512</span>)</span><br><span class="line">n0=p**<span class="number">2</span>+q**<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n0 =&#x27;</span>,n0)</span><br><span class="line"></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">n=p*q</span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c =&#x27;</span>,c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># n0 = 192573744538639130845868727014075967669513667763315934161849620531683536696376138303320681922782003088094539724238109116416456294472461075668568088688287209898850985024632463251984323888765249950269595045648435192047990940593817086918399212487934262786817996341234806934640246045717955941049031252181676005098</span></span><br><span class="line"><span class="comment"># c = 1541487946178344665369701061600511101386703525091161664845860490319891364778119340877432325104511886045675705355836238082338561882984242433897307540689460550149990099278522355182552369360471907683216881430656993369902193583200864277424101240184767762679012998894182000556316811264544736356326198994294262682</span></span><br></pre></td></tr></table></figure> 题目分析：</p><p>直接用sagemath自带的函数解 <code>exp:</code> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">n0 = <span class="number">192573744538639130845868727014075967669513667763315934161849620531683536696376138303320681922782003088094539724238109116416456294472461075668568088688287209898850985024632463251984323888765249950269595045648435192047990940593817086918399212487934262786817996341234806934640246045717955941049031252181676005098</span></span><br><span class="line">c = <span class="number">1541487946178344665369701061600511101386703525091161664845860490319891364778119340877432325104511886045675705355836238082338561882984242433897307540689460550149990099278522355182552369360471907683216881430656993369902193583200864277424101240184767762679012998894182000556316811264544736356326198994294262682</span></span><br><span class="line">p, q = two_squares(n0)</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">n=p*q</span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d=inverse(e,phi)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(<span class="built_in">pow</span>(c, <span class="built_in">int</span>(d), n))))</span><br><span class="line"><span class="comment"># DASCTF&#123;4028d59bb18028e2df8d5d51b376908c&#125;</span></span><br></pre></td></tr></table></figure></p><h2 id="ezmatrix">EZmatrix</h2><p>题目描述：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line">part = [bytes_to_long(flag[<span class="number">16</span>*i:<span class="number">16</span>*(i+<span class="number">1</span>)]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">36</span>)]</span><br><span class="line">M = Matrix(Zmod(n),[</span><br><span class="line">[part[<span class="number">6</span>*i+j] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>)</span><br><span class="line">])</span><br><span class="line">d = getPrime(<span class="number">920</span>)</span><br><span class="line">phi = <span class="string">&quot;???????????????????&quot;</span></span><br><span class="line">e = inverse(d,phi)</span><br><span class="line">C = M ** e</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e = &quot;</span>,e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n = &quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;C = &quot;</span>,<span class="built_in">list</span>(C))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">e =  75759282367368799544583457453768987936939259860144125672621728877894789863642594830153210412190846168814565659154249521465974291737543527734700545818480398345759102651419148920347712594370305873033928263715201812217658781693392922382633382112810845248038459857654576967447255765379492937162044564693535012144718871564964154729561032186045816489683161588345299569985304078255628527588710513640102450308662163641732851643593090646321420800552303398630738674858967724338819227042384745213425656939930135311339542647104499427215254435723921505189649944059658797193927706249542240737884739119223756635540945563449010120382834036979025801446796614280064172405549502694658175837126702821804106928800917035327292099385809060363635737715320709749444795680950552240184529017581997661357846852201424248086080872655164246614710423850620222735225702427025180018637830386631573912505087046428427137407828859500285127835020183526681560129322020299774376860830513167598911105104946612301909005028216010756378307303924865571457872055817289904093797943893894249094212422766513999129665299858860878710920689322752152527130981697461526170099006972245891313788064563118647308122107999430867808150749979046611265769861111738145184897880080810883790769899</span></span><br><span class="line"><span class="string">n =  99231341424553040688931525316017803824870567327100041969103204566938549582832516706206735181835068382521133899811339836861525260134721134887446163174620592328661881621312114348726944317349680760092960665800660405612177225373482880941142930135489885221592416840149732795379174704611605960303340578163595465083</span></span><br><span class="line"><span class="string">C =  [(60962492392910372655829579800623350869143417412923809005355225641547310999689300067771076642840347631213921261735160280073159348909580620372515144615183619484116931277062459534426852453669020768212186583219050186476749582255169630649290603191487938394564254993928830585225872994041844749592189414050346998498, 47570494768722430855321464941025696993380565713448923284620084505935271175106089198810572053594395338695564872188782440522323916637635901100372244111566233734761590240981688569861120646443206802056135646056594081150032676095454677651908656653983161086373605006880681566863747858292744224442976621418797205399, 2688181329187093888869457776665971472383024590564085347482816443420850842347573980241749337291795284050213197900458997704783513811033569074013164405426061208943782009246429930688449460037973029867946269202889059604686278471272132218340037450771429686919881716403514347492132483441838117219973263406807217974, 69152734772841729744864181378357911157430121423043131526556925765272499517864120668258106865684921607378129493604079173227751534891590136750575722628168425004031909583828469631788511241718967754283602045554638710656882949816656201393892265416912928916418003936183428716201442550333656679935723677385561024921, 87916597194547447124625284021545845894398798075569904698700457948229723401310121661631733143462834474179528341099541302790092417595967636978700000869424652408571342615122171893834241191682257315189450299073036702171002969055277890180093192346807050020075074678160917020003175299572457770301172013554859610885, 87786307503376954316030650346838348696800737186248037233105303922917125487679342882764384018020917373783494097970572084301842435397667036289687253696282531883479674194433525871169279787175003732384644823866404707423021568914833613783558731218680259786594673087000922732933203580338582174836542335256895112774), (19925935729162396840966340912353714097004160798615839580675147896543197999100114040514331382227016633727621399922875280921939403294675089237685490824481702911947235694589943642920569884248825154743655331893278941153597853907070809496035573765953115001007513406579011860142499904738601402936261081671704883289, 58482679161881651450519578125499657069493057728415805326447380380141486533923095749022382883536937182057631317376727990670863971670749991637396946761762614232393617646003704455294405699238388026259395339494678908761885707645569206191899296873833133914051981244247283254577922595285757876026540914747153605160, 7876769535761750153866264956186319035785652316141088148036849233806135397857747677246966644027825150213665232397824678749874814778004967045900692519991198396803997342682950493474998693632762775853085063006163824393616781789234994435613494739078376441202546497376889898623686582966994626392473756048641752814, 40374752091452840478156903709507048899177048294570218656121556350119195781557565218138424538202862806990185673750490061744496157480684671895195643247659670629323773035075555928457149898576983418457948777991721866891250461708466719417665721953156700367709890061169794698483650373164167487545578780062511325698, 4123966761831135761457937397066767492577970106907260057338733132356073163290362041428543487785541800166623333444500095074624068090394361249458065855973762485004782025486942019551010253665248191341796357273736185376285833313657930327592630423321995683340268803166901859312919131785819655040568361583085676057, 27583730178148494208215582336953731428677655384934947406110969819755861309635715916436503750399886946834588631955424622786954747202685007199149082525818506387606813299614560669074223670606725332129580433663793218302408230595218329795347716963182007259165979155950826829268655927501949206255488502388472700075), (56315845708240095082772501761675446313947442745181474765872020399653138411744471022394674490163519262253419142994958571123783825827944495254330717218087742852853691152509996374039921954037271141012224417462582306680805308244999271694256058220813474581635472407864886498830142166123949972548432270703952960923, 32896154872958176487612097856128071067779298934826306391422436791812001537876365873180665334382055349578758924117227229354892419126981829368419291413849009911423713613087552037524220081917635206657387768281003765094819963853123278586621439766100307324554778715337379588648264826773884692017793176376154675501, 28403727117575806889742293164072634954876499471182701829204385629161049158547263968390684814088323042021380910604906904467751008743919604654911693492973603888427448583482505774314038985928231290890291117425907291509663229092491530818877566758210084483466899541610500708571206332019126409191398637035395635692, 7821951828810668315162755325480202107754899640542890161681114897656891485110009850481857086945730357655734989848039495868447513739566035840945273281198690239884406844038006297455016615584047106189557019820282710249181355660515976689844733069965635239977868606412950428777686615619878916256034858820314322668, 76525192903457309209366743987447032158337732768547571793488111729224008602119438154849638971504949003719786026252648739617917436256435628300010323711153402229164528979259259214627588535459760359253880641429469562048622701982862831594514336875830284504454333566487968184255876886415003174627552219974082980636, 30637464791180430144279994098478365983230561289862073957684155866766012864169717451278445846218491051030419180119954192685431439312797317764656461287947635921370686618109628728836641249249386071858927735736888632316823543835130338563924434711937538665035969023712380857260473274001732469412322752873384968601), (10730358875712453042013970789576402939218800351221446191771233177536009349624025030667973532521911666593354783762941362456771050299436815799063691625091095782507693177746119034551757951243518170991606414822107132916004609627849551446847131359143181119565430368982878108761799084029033027032755115381679417096, 24507369071589713103970720335832744954845520380398828656842561115495704802037030133393011751145702976684589338927049344552393322139237977140642967325628644800492714995845105460369698708659335653391904302955502145025551463160676476446189657801618085294176671181454800483878164016749534940141884944397289890871, 92820108862600030043211342419176390123942091097153321737988513673868731991771619676009296651860321326370172965558922130850493512979555339094561381645396270883677588661828281447106070801829307329117814743685760943125981155705527918307567109500089138120007989551366153992391010620955360882383556542559392894262, 74641576048678849575812629186393953979307695146586927788280165573903662821064189347983936198087197963380651069815352351349775566210254797203960521484844402002602126951649571328507275278196835502471467819034725531964918681611446773963678730681425674462738816516031202042449731753950180027830876790421576081225, 66685821407492303211977447210040267021195326010645045932118328414906080616013267240390961550749369776862683674842903750593917463844615658362977613737130311357170777497628656513144020197746398798679807363859886437403991016453908185102814636772479260178297629433510961788244743608125906745012445887428376915629, 37645288166396858415565430454995281883016537193725289151596326083427351314771501111923193754508050507668744794821015166055917903051072319801945727142824029386542877351207944394255175419467949702189317844980323590614559226315219797417693447676522076956364574845889800486817292590561738321483697160713821529546), (9736711624136652052770116447223295880053359374932369087990200046581983386760557572632286124794444930134179594903564091220200006471388531967010990324827682059485960618855287386961552241259199988445679075595951186424593845864059162998542185539998139746836413273921569266377169025136169016355692767128488900477, 13089476325068401303987570656586592581224347700750455041713556437672762444853346450009029644985692097286649094772508755542691510307531122589433151470493395688605259544275677288082873918929554397272543678133089309672143858040052870098814015145664055945998991679722753687104989489973852117933261358247564988071, 61284598700800926964424249048307178141566077849519756690996988745704530644294308600472621437373651397677668023765897304421576611779363230148263097867987781840048890597647956492658737562151147335685622316577395377277998529914754048562837674418322097396064634364367313407061824216514715793677445932930269152481, 61301319985121628512628256322255391212515053807722664632938090246192955763394429545800696862309263991966900735678875111077481123759702692720133903430321183178233894849098114454863008686201888641863850157441070304164754292432907144839124698488730051010247980425937242664545487287543260612682886985351085138001, 47435322189871012567009786652825469952862610804330828872313845269622590943796389601479086952212526668296575803391674745677862994957044749158154034984601827088557466296368252473168676311089972605318362738347163748086202789713353987691976193103958097243650266229294687864565520648709873760054473254540098351391, 32817913908586741358496040992834207477154835734595147264489781242919114343572982132460531399879345665767073663537263426565698777735998027473421290120433416805825431315476774452072722260737533264180361001819202057517709886953362750990747046346025917668519097056756157788411735612581204089155228884131378072233), (12642425264267098423833241400926732957307073786117649292717736141221694320062979757108242390714162456346780855636174573171779655212347730635821416215537084671118355916330992142141813099104775940725892721614126911510988568345398817554586646066735943804403563179908909629802981392776238272786744291004069356775, 32752716826697049825682788062896730338057604164648704588810956358313907785865814197561208570319757370744105618622052812423057447877481397095444475610617492626525875388680227635541658500637643262806846291312209615044898925278862926827256312481616510480170805540775256088922398310392639344678087647083653765821, 3022511069721965916815622985038080358228403264264831484927372260512043862778138035440859308822033467592971930633307565996150364843965884881400481310689834508879168477508572967173126034539725429899016318805136722734731136521866714013050522337795295311863953350784370773653485436181314864092331268367915892666, 44494293452595159373079306455244053834138260846967620303725161277545981351217523341157156495183639822519882035281721714315331475283644457723353767200184408989752610854962070029226464081899523388838531578296754646973186313035869250105084114692966907900349716132438711767401573694320357418158987949401765528425, 66130193533773704471809811407675367482896080993725170656227230634400122250448911267627547029162335780439769273413020435641724884803365183531498010730643595588304390566255555816793888715047993688213860064650538998545316010718479287163068234420541010586467244361311016741807424118408290204453770332676360498896, 74649855891297747785048523345822478110464591680545397129030301786991725968732851407232435476064324066227685639784066521927825943853534396958155065514682624920312291149309530337681973006060504366672574864594730979571926592855426800301765737184843799883674936189745414847240093702374870446528449267420369306618)]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>题目分析：</p><p>连分数解吧</p><p><ahref="https://ctf-wiki.org/crypto/asymmetric/rsa/d_attacks/rsa_extending_wiener/">维纳攻击（连分数）</a></p><p><code>exp1:</code> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">continuedFra</span>(<span class="params">x, y</span>):</span><br><span class="line">    cf = []</span><br><span class="line">    <span class="keyword">while</span> y:</span><br><span class="line">        cf.append(x // y)</span><br><span class="line">        x, y = y, x % y</span><br><span class="line">    <span class="keyword">return</span> cf</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gradualFra</span>(<span class="params">cf</span>):</span><br><span class="line">    numerator = <span class="number">0</span> <span class="comment"># 分子</span></span><br><span class="line">    denominator = <span class="number">1</span> <span class="comment"># 分母</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> cf[::-<span class="number">1</span>]:</span><br><span class="line">        numerator, denominator = denominator, x * denominator + numerator</span><br><span class="line">    <span class="keyword">return</span> numerator, denominator</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getGradualFra</span>(<span class="params">cf</span>):</span><br><span class="line">    gf = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(cf) + <span class="number">1</span>):</span><br><span class="line">        gf.append(gradualFra(cf[:i]))</span><br><span class="line">    <span class="keyword">return</span> gf</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wienerAttack</span>(<span class="params">e, n</span>):</span><br><span class="line">    cf = continuedFra(e, n)</span><br><span class="line">    gf = getGradualFra(cf)</span><br><span class="line">    <span class="keyword">for</span> d,k <span class="keyword">in</span> gf:</span><br><span class="line">        <span class="keyword">if</span> d.bit_length() == <span class="number">920</span> <span class="keyword">and</span> isPrime(d):</span><br><span class="line">            <span class="built_in">print</span>(d)</span><br><span class="line">e =  <span class="number">75759282367368799544583457453768987936939259860144125672621728877894789863642594830153210412190846168814565659154249521465974291737543527734700545818480398345759102651419148920347712594370305873033928263715201812217658781693392922382633382112810845248038459857654576967447255765379492937162044564693535012144718871564964154729561032186045816489683161588345299569985304078255628527588710513640102450308662163641732851643593090646321420800552303398630738674858967724338819227042384745213425656939930135311339542647104499427215254435723921505189649944059658797193927706249542240737884739119223756635540945563449010120382834036979025801446796614280064172405549502694658175837126702821804106928800917035327292099385809060363635737715320709749444795680950552240184529017581997661357846852201424248086080872655164246614710423850620222735225702427025180018637830386631573912505087046428427137407828859500285127835020183526681560129322020299774376860830513167598911105104946612301909005028216010756378307303924865571457872055817289904093797943893894249094212422766513999129665299858860878710920689322752152527130981697461526170099006972245891313788064563118647308122107999430867808150749979046611265769861111738145184897880080810883790769899</span></span><br><span class="line">n =  <span class="number">99231341424553040688931525316017803824870567327100041969103204566938549582832516706206735181835068382521133899811339836861525260134721134887446163174620592328661881621312114348726944317349680760092960665800660405612177225373482880941142930135489885221592416840149732795379174704611605960303340578163595465083</span></span><br><span class="line">wienerAttack(e,n ** <span class="number">4</span>)</span><br></pre></td></tr></table></figure> <spanclass="math inline">\(为什么是n^4，文章里面说的挺清楚的：\)</span></p><p><imgsrc="https://cdn.jsdelivr.net/gh/Emmaaaaaaaaaaaaaaaaa/blog-img/image/202408292031653.png" /></p><p><span class="math inline">\(题目中当N = n^4时，e \approxN，故用n^4（满足条件d &lt; \frac{\sqrt{2}}{2g}N^{\frac{1}{4}} =\frac{\sqrt{2}}{2g}n）\)</span></p><p>哎呀，一开始一直弄那个phi，矩阵的phi这里我确实不是很懂，后面知道了但发现我压根不知道p,q，求出来了phi也没用啊，所以就换个思路啦</p><blockquote><p>如果给了p，q，且 e = getPrime(1024) 那么（6阶矩阵）：</p><p>order_p = p * (p - 1) * (p + 1) * (p ^ 2 + 1) * (p ^ 2 + p + 1) * (p^ 2 - p + 1) * (p ^ 5 - 1)</p><p>order_q = q * (q - 1) * (q + 1) * (q ^ 2 + 1) * (q ^ 2 + q + 1) * (q^ 2 - q + 1) * (q ^ 5 - 1)</p><p>phi = order_p * order_q</p></blockquote><h2 id="ezsignin">EZsignin</h2><p>题目描述：</p><p><code>task.py</code> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">p = <span class="number">174523845247570741054964008585718839267</span></span><br><span class="line">E = EllipticCurve(GF(p), [<span class="number">0</span>, <span class="number">486662</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>])</span><br><span class="line">G=E(<span class="number">2247961404505753398791635923994899528</span>, <span class="number">108711418033303501028455466081133667288</span>)</span><br><span class="line">n=G.order()</span><br><span class="line">Cofactor = E.order() // n</span><br><span class="line">f = <span class="number">128</span>+<span class="number">1</span></span><br><span class="line">lambda_ = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">retbar</span>(<span class="params">P</span>):</span><br><span class="line">    index = (f + <span class="number">1</span>) // <span class="number">2</span> <span class="comment"># 65</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">int</span>(P[<span class="number">0</span>]) % (<span class="number">2</span> ^ index) + <span class="number">2</span> ^ index) % n</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genkey</span>():</span><br><span class="line">    w = randint(<span class="number">1</span>, n - <span class="number">1</span>)</span><br><span class="line">    W = w * G</span><br><span class="line">    <span class="keyword">return</span> (w, W)</span><br><span class="line"></span><br><span class="line">B_pri_w, B_pub_W = genkey()</span><br><span class="line"><span class="built_in">print</span>(B_pub_W[<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">LS = []</span><br><span class="line">LR = []</span><br><span class="line">BR = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Exchange</span>(<span class="params">i</span>): <span class="comment"># 10</span></span><br><span class="line">    A_pri_w, A_pub_W = genkey()</span><br><span class="line">    A_pri_r, A_pub_R = genkey()</span><br><span class="line">    B_pri_r, B_pub_R = genkey()</span><br><span class="line"></span><br><span class="line">    sa = (A_pri_r + retbar(A_pub_R) * A_pri_w) % n</span><br><span class="line">    sb = (B_pri_r + retbar(B_pub_R) * B_pri_w) % n</span><br><span class="line"></span><br><span class="line">    Ka = Cofactor * (B_pub_R + retbar(B_pub_R) * B_pub_W) * sa</span><br><span class="line">    Kb = Cofactor * (A_pub_R + retbar(A_pub_R) * A_pub_W) * sb</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> (Ka == Kb)</span><br><span class="line"></span><br><span class="line">    leakageS = sb &gt;&gt; lambda_</span><br><span class="line">    leakageR = B_pri_r &gt;&gt; lambda_</span><br><span class="line"></span><br><span class="line">    LS.append(leakageS), LR.append(leakageR)</span><br><span class="line">    BR.append(B_pub_R[<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>): Exchange(i)</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;LS=&quot;</span>, LS)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;LR=&quot;</span>, LR)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;BR=&quot;</span>, BR)</span><br><span class="line">H=hashlib.md5()</span><br><span class="line">H.update(long_to_bytes(B_pri_w))</span><br><span class="line">key=H.hexdigest().encode()</span><br><span class="line">aes = AES.new(key,AES.MODE_ECB)</span><br><span class="line"><span class="built_in">print</span>(aes.encrypt(flag))</span><br></pre></td></tr></table></figure> <code>secret.txt</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">56142839234500040174315077324489019612</span>, <span class="number">143186177525574678948140963663687495447</span>)</span><br><span class="line">LS= [<span class="number">12160779</span>, <span class="number">70634852</span>, <span class="number">136488679</span>, <span class="number">93279448</span>, <span class="number">51769705</span>, <span class="number">99408367</span>, <span class="number">94011238</span>, <span class="number">46255543</span>, <span class="number">136054320</span>, <span class="number">126842658</span>]</span><br><span class="line">LR= [<span class="number">117789932</span>, <span class="number">85602320</span>, <span class="number">136131278</span>, <span class="number">85538539</span>, <span class="number">33115646</span>, <span class="number">15821127</span>, <span class="number">122073977</span>, <span class="number">40205177</span>, <span class="number">40509142</span>, <span class="number">121833940</span>]</span><br><span class="line">BR= [(<span class="number">43128875586771925869851532015581155657</span>, <span class="number">108714366549720544283054523544596695631</span>), (<span class="number">166053844834143846221197595138208659402</span>, <span class="number">9389299139547698081250285594708260233</span>), (<span class="number">83160043610860066750778648875060399604</span>, <span class="number">160655466348101518011620435983302563358</span>), (<span class="number">18306927902958362110653472691194540502</span>, <span class="number">141566997533915037448387258113883793369</span>), (<span class="number">124719869188706449552550102421264489653</span>, <span class="number">111266021208672789646176095367638959348</span>), (<span class="number">62115794167524204331339724293036031704</span>, <span class="number">24476842210910012261000793337134128911</span>), (<span class="number">57017187772347635647835418540384524017</span>, <span class="number">149273114828279413180900590599119201032</span>), (<span class="number">141865913804035015431129030802262884043</span>, <span class="number">11219445710980991629921733217597739715</span>), (<span class="number">35994282847505215202392163277052083355</span>, <span class="number">5366425669461724819918825109516828913</span>), (<span class="number">72621299937996657982583201267406651177</span>, <span class="number">39297013522202608324989011761142875947</span>)]</span><br><span class="line"><span class="string">b&#x27;\xd7\x8c\xf1Yx\x05W\x8ckq\xfdb\xd5\x81K&quot;\xe7q\x88\x18\xedq\x9f\xcap\x1cTB\xc9)\xe1c\xf4~\x7f\xccwh\xfe\t\xbf\xb2!\xde\x84\xeeO\x0f8\xd1\xac\xbc\x1c \xf0F\x0c\x00\xc9\xa7\x9e\x06\xdan&#x27;</span></span><br></pre></td></tr></table></figure> 题目分析：</p><p>代码很多行，但逻辑很简单</p><p><span class="math inline">\(W_b = w_b * G\)</span></p><p><span class="math inline">\(W_b和G都给了，要求w_b\)</span></p><p>又有： <span class="math display">\[\begin{align*}&amp;W_{a} = w_{a} * G\\&amp;R_{a} = r_{a} * G\\&amp;R_{b} = r_{b} * G\\&amp;S_{b} = r_{b} + w_{b} * f(R_{b})\\&amp;其中S_{b}, r_{b}的高94bit已知，f(R_b)已知，求w_{b}\\&amp;变一下：\\&amp;(S_{bh} + S_{bl}) = (r_{bh} + r_{bl}) + w_{b} * f(R_b)\\&amp;再变一下：\\&amp;(S_{bl} - r_{bl}) = f(R_b) * w_b + (r_{bh} - S_{bh})\\&amp;一眼HNP\\&amp;化成这种形式：k_i \equiv A_i * x + B_i \pmod n\\&amp;令(S_{bl} - r_{bl}) = k_i, f(R_b) = A_i,  (r_{bh} - S_{bh}) = B_i\\&amp;其中k_i, A_i, B_i均已知，k_i—100bit；A_i—66bit；B_i—(94 +100)bit；x,n—128bit\end{align*}\]</span> 构造如下格： <span class="math display">\[M=\begin{pmatrix}n\\&amp;\ddots\\&amp;&amp;n\\A_1&amp;\cdots&amp;A_{10}&amp;\frac{2^{100}}{2^{128}}\\B_1&amp;\cdots&amp;B_{10}&amp;&amp;2^{100}\end{pmatrix}\]</span> Z为自己需要构造的数（确保目标向量中所有元素大小与<spanclass="math inline">\(k_i\)</span>相近）</p><p><spanclass="math inline">\(\begin{pmatrix}l_1&amp;\cdots&amp;l_i&amp;x&amp;1\end{pmatrix}\timesM=\begin{pmatrix}k_1&amp;\cdots&amp;k_i&amp;2^{100}/2^{128}*x&amp;2^{100}\end{pmatrix}\)</span></p><p><code>exp1:</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="number">174523845247570741054964008585718839267</span></span><br><span class="line">E = EllipticCurve(GF(p), [<span class="number">0</span>, <span class="number">486662</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>])</span><br><span class="line">G=E(<span class="number">2247961404505753398791635923994899528</span>, <span class="number">108711418033303501028455466081133667288</span>)</span><br><span class="line">n=G.order()</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line">Cofactor = E.order() // n</span><br><span class="line">f = <span class="number">128</span>+<span class="number">1</span></span><br><span class="line">lambda_ = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">retbar</span>(<span class="params">P</span>):</span><br><span class="line">    index = (f + <span class="number">1</span>) // <span class="number">2</span> <span class="comment"># 65</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">int</span>(P[<span class="number">0</span>]) % (<span class="number">2</span> ^ index) + <span class="number">2</span> ^ index) % n</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genkey</span>():</span><br><span class="line">    w = randint(<span class="number">1</span>, n - <span class="number">1</span>)</span><br><span class="line">    W = w * G</span><br><span class="line">    <span class="keyword">return</span> (w, W)</span><br><span class="line"></span><br><span class="line">WB = E(<span class="number">56142839234500040174315077324489019612</span>, <span class="number">143186177525574678948140963663687495447</span>)</span><br><span class="line">LS= [<span class="number">12160779</span>, <span class="number">70634852</span>, <span class="number">136488679</span>, <span class="number">93279448</span>, <span class="number">51769705</span>, <span class="number">99408367</span>, <span class="number">94011238</span>, <span class="number">46255543</span>, <span class="number">136054320</span>, <span class="number">126842658</span>]</span><br><span class="line">LR= [<span class="number">117789932</span>, <span class="number">85602320</span>, <span class="number">136131278</span>, <span class="number">85538539</span>, <span class="number">33115646</span>, <span class="number">15821127</span>, <span class="number">122073977</span>, <span class="number">40205177</span>, <span class="number">40509142</span>, <span class="number">121833940</span>]</span><br><span class="line">BR= [(<span class="number">43128875586771925869851532015581155657</span>, <span class="number">108714366549720544283054523544596695631</span>), (<span class="number">166053844834143846221197595138208659402</span>, <span class="number">9389299139547698081250285594708260233</span>), (<span class="number">83160043610860066750778648875060399604</span>, <span class="number">160655466348101518011620435983302563358</span>), (<span class="number">18306927902958362110653472691194540502</span>, <span class="number">141566997533915037448387258113883793369</span>), (<span class="number">124719869188706449552550102421264489653</span>, <span class="number">111266021208672789646176095367638959348</span>), (<span class="number">62115794167524204331339724293036031704</span>, <span class="number">24476842210910012261000793337134128911</span>), (<span class="number">57017187772347635647835418540384524017</span>, <span class="number">149273114828279413180900590599119201032</span>), (<span class="number">141865913804035015431129030802262884043</span>, <span class="number">11219445710980991629921733217597739715</span>), (<span class="number">35994282847505215202392163277052083355</span>, <span class="number">5366425669461724819918825109516828913</span>), (<span class="number">72621299937996657982583201267406651177</span>, <span class="number">39297013522202608324989011761142875947</span>)]</span><br><span class="line">ct = <span class="string">b&#x27;\xd7\x8c\xf1Yx\x05W\x8ckq\xfdb\xd5\x81K&quot;\xe7q\x88\x18\xedq\x9f\xcap\x1cTB\xc9)\xe1c\xf4~\x7f\xccwh\xfe\t\xbf\xb2!\xde\x84\xeeO\x0f8\xd1\xac\xbc\x1c \xf0F\x0c\x00\xc9\xa7\x9e\x06\xdan&#x27;</span></span><br><span class="line"></span><br><span class="line">M = matrix(QQ, <span class="number">12</span>, <span class="number">12</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    M[i, i] = n</span><br><span class="line">    M[-<span class="number">2</span>, i] = retbar(BR[i])</span><br><span class="line">    M[-<span class="number">1</span>, i] = (LR[i] &lt;&lt; lambda_) - (LS[i] &lt;&lt; lambda_)</span><br><span class="line">M[-<span class="number">2</span>, -<span class="number">2</span>] = <span class="number">2</span> ** <span class="number">100</span> / <span class="number">2</span> ** <span class="number">128</span></span><br><span class="line">M[-<span class="number">1</span>, -<span class="number">1</span>] = <span class="number">2</span> ** <span class="number">100</span></span><br><span class="line"></span><br><span class="line">L = M.LLL()</span><br><span class="line"><span class="built_in">print</span>(L)</span><br><span class="line">res = L[<span class="number">2</span>][-<span class="number">2</span>] / (<span class="number">2</span> ** <span class="number">100</span> / <span class="number">2</span> ** <span class="number">128</span>) % n</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment"># 1178130499626730132053516695382476673</span></span><br></pre></td></tr></table></figure><p>到这里就一直出不来了，那就是求到的x有问题</p><p>开始测试，发现不管怎么样求到的x的后36bit是不准的</p><p>所以题目中的数据得到的x低36bit应该也是有问题的</p><p>这时候<code>B_pub_W[0:2]</code>的作用就出来了（我说呢，为什么会把这个给出来）</p><p>所以问题变成了：<span class="math inline">\(W_b = (w&#39;_b + k) *G\)</span>，其中 <span class="math inline">\(W_b，w&#39;_b，G\)</span>已知且 <span class="math inline">\(k\)</span> 为36bit，求 <spanclass="math inline">\(k\)</span></p><p><span class="math inline">\(k是36bit\)</span>不大，我们使用中间相遇攻击进行求解 <span class="math display">\[\begin{align*}&amp;令T = (W_b - w&#39;_b) * G = k * G = (k_h * 2^{18} + k_l) * G\\&amp;其中k_h为k的高18bit，k_l为k的低18bit\\&amp;T = (k_h * 2^{18} + k_l) * G\\&amp;T - k_l * G = k_h * 2^{18} * G (此刻即为相遇的位置)\\&amp;之后爆破k_l和k_h即可\end{align*}\]</span></p><p><code>完整exp:</code> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="comment"># part1</span></span><br><span class="line">p = <span class="number">174523845247570741054964008585718839267</span></span><br><span class="line">E = EllipticCurve(GF(p), [<span class="number">0</span>, <span class="number">486662</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>])</span><br><span class="line">G=E(<span class="number">2247961404505753398791635923994899528</span>, <span class="number">108711418033303501028455466081133667288</span>)</span><br><span class="line">n=G.order()</span><br><span class="line">Cofactor = E.order() // n</span><br><span class="line">f = <span class="number">128</span>+<span class="number">1</span></span><br><span class="line">lambda_ = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">retbar</span>(<span class="params">P</span>):</span><br><span class="line">    index = (f + <span class="number">1</span>) // <span class="number">2</span> <span class="comment"># 65</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">int</span>(P[<span class="number">0</span>]) % (<span class="number">2</span> ^ index) + <span class="number">2</span> ^ index) % n</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genkey</span>():</span><br><span class="line">    w = randint(<span class="number">1</span>, n - <span class="number">1</span>)</span><br><span class="line">    W = w * G</span><br><span class="line">    <span class="keyword">return</span> (w, W)</span><br><span class="line"></span><br><span class="line">WB = E(<span class="number">56142839234500040174315077324489019612</span>, <span class="number">143186177525574678948140963663687495447</span>)</span><br><span class="line">LS= [<span class="number">12160779</span>, <span class="number">70634852</span>, <span class="number">136488679</span>, <span class="number">93279448</span>, <span class="number">51769705</span>, <span class="number">99408367</span>, <span class="number">94011238</span>, <span class="number">46255543</span>, <span class="number">136054320</span>, <span class="number">126842658</span>]</span><br><span class="line">LR= [<span class="number">117789932</span>, <span class="number">85602320</span>, <span class="number">136131278</span>, <span class="number">85538539</span>, <span class="number">33115646</span>, <span class="number">15821127</span>, <span class="number">122073977</span>, <span class="number">40205177</span>, <span class="number">40509142</span>, <span class="number">121833940</span>]</span><br><span class="line">BR= [(<span class="number">43128875586771925869851532015581155657</span>, <span class="number">108714366549720544283054523544596695631</span>), (<span class="number">166053844834143846221197595138208659402</span>, <span class="number">9389299139547698081250285594708260233</span>), (<span class="number">83160043610860066750778648875060399604</span>, <span class="number">160655466348101518011620435983302563358</span>), (<span class="number">18306927902958362110653472691194540502</span>, <span class="number">141566997533915037448387258113883793369</span>), (<span class="number">124719869188706449552550102421264489653</span>, <span class="number">111266021208672789646176095367638959348</span>), (<span class="number">62115794167524204331339724293036031704</span>, <span class="number">24476842210910012261000793337134128911</span>), (<span class="number">57017187772347635647835418540384524017</span>, <span class="number">149273114828279413180900590599119201032</span>), (<span class="number">141865913804035015431129030802262884043</span>, <span class="number">11219445710980991629921733217597739715</span>), (<span class="number">35994282847505215202392163277052083355</span>, <span class="number">5366425669461724819918825109516828913</span>), (<span class="number">72621299937996657982583201267406651177</span>, <span class="number">39297013522202608324989011761142875947</span>)]</span><br><span class="line">c = <span class="string">b&#x27;\xd7\x8c\xf1Yx\x05W\x8ckq\xfdb\xd5\x81K&quot;\xe7q\x88\x18\xedq\x9f\xcap\x1cTB\xc9)\xe1c\xf4~\x7f\xccwh\xfe\t\xbf\xb2!\xde\x84\xeeO\x0f8\xd1\xac\xbc\x1c \xf0F\x0c\x00\xc9\xa7\x9e\x06\xdan&#x27;</span></span><br><span class="line">M = matrix(QQ, <span class="number">12</span>, <span class="number">12</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    M[i, i] = n</span><br><span class="line">    M[-<span class="number">2</span>, i] = retbar(BR[i])</span><br><span class="line">    M[-<span class="number">1</span>, i] = (LR[i] &lt;&lt; lambda_) - (LS[i] &lt;&lt; lambda_)</span><br><span class="line">M[-<span class="number">2</span>, -<span class="number">2</span>] = <span class="number">2</span> ** <span class="number">100</span> / <span class="number">2</span> ** <span class="number">128</span></span><br><span class="line">M[-<span class="number">1</span>, -<span class="number">1</span>] = <span class="number">2</span> ** <span class="number">100</span></span><br><span class="line"></span><br><span class="line">L = M.LLL()</span><br><span class="line">res = L[<span class="number">2</span>][-<span class="number">2</span>] / (<span class="number">2</span> ** <span class="number">100</span> / <span class="number">2</span> ** <span class="number">128</span>) % n</span><br><span class="line"><span class="comment"># 1178130499626730132053516695382476673 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># part2</span></span><br><span class="line">false = res &gt;&gt; <span class="number">36</span> &lt;&lt; <span class="number">36</span></span><br><span class="line">T = WB - fale * G</span><br><span class="line">tmp = T - <span class="number">2</span> ** <span class="number">17</span> * G</span><br><span class="line">tt_dict = &#123;&#125;</span><br><span class="line"><span class="comment"># kl</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">2</span> ** <span class="number">17</span>, <span class="number">2</span> ** <span class="number">18</span>):</span><br><span class="line">    tmp -= G</span><br><span class="line">    tt_dict[tmp[<span class="number">0</span>]] = i</span><br><span class="line"></span><br><span class="line"><span class="comment"># kh</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">2</span> ** <span class="number">17</span>, <span class="number">2</span> ** <span class="number">18</span>):</span><br><span class="line">    khG = (i &lt;&lt; <span class="number">18</span>) * G</span><br><span class="line">    <span class="keyword">if</span> khG[<span class="number">0</span>] <span class="keyword">in</span> tt_dict:</span><br><span class="line">        kh = i</span><br><span class="line">        kl = tt_dict[khG[<span class="number">0</span>]] + <span class="number">1</span></span><br><span class="line">        B_pri_w = false + (kh &lt;&lt; <span class="number">18</span>) + kl</span><br><span class="line">        H=hashlib.md5()</span><br><span class="line">        H.update(long_to_bytes(B_pri_w))</span><br><span class="line">        key=H.hexdigest().encode()</span><br><span class="line">        aes = AES.new(key,AES.MODE_ECB)</span><br><span class="line">        <span class="built_in">print</span>(aes.decrypt(c))        </span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># DASCTF&#123;C0ngRatul4tion5_On_y0ur_SuCc3ssfuL_S1gN_1n&#125;</span></span><br></pre></td></tr></table></figure> 浅记一下</p><p><code>关键词:</code>two_squares(n0)，矩阵phi，维纳连分数，HNP，中间相遇</p>]]></content>
      
      
      
        <tags>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[羊城杯 2024] Crypto</title>
      <link href="/2024/08/28/%E7%BE%8A%E5%9F%8E%E6%9D%AF-2024-Crypto/"/>
      <url>/2024/08/28/%E7%BE%8A%E5%9F%8E%E6%9D%AF-2024-Crypto/</url>
      
        <content type="html"><![CDATA[<h2 id="th_curve">TH_Curve</h2><p>题目描述：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_THcurve</span>(<span class="params">P, Q</span>):</span><br><span class="line">    <span class="keyword">if</span> P == (<span class="number">0</span>, <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> Q</span><br><span class="line">    <span class="keyword">if</span> Q == (<span class="number">0</span>, <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> P</span><br><span class="line">    x1, y1 = P</span><br><span class="line">    x2, y2 = Q</span><br><span class="line">    x3 = (x1 - y1 ** <span class="number">2</span> * x2 * y2) * <span class="built_in">pow</span>(a * x1 * y1 * x2 ** <span class="number">2</span> - y2, -<span class="number">1</span>, p) % p</span><br><span class="line">    y3 = (y1 * y2 ** <span class="number">2</span> - a * x1 ** <span class="number">2</span> * x2) * <span class="built_in">pow</span>(a * x1 * y1 * x2 ** <span class="number">2</span> - y2, -<span class="number">1</span>, p) % p</span><br><span class="line">    <span class="keyword">return</span> x3, y3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul_THcurve</span>(<span class="params">n, P</span>):</span><br><span class="line">    R = (<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            R = add_THcurve(R, P)</span><br><span class="line">        P = add_THcurve(P, P)</span><br><span class="line">        n = n // <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> R</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = <span class="number">10297529403524403127640670200603184608844065065952536889</span></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line">G = (<span class="number">8879931045098533901543131944615620692971716807984752065</span>, <span class="number">4106024239449946134453673742202491320614591684229547464</span>)</span><br><span class="line"></span><br><span class="line">FLAG = flag.lstrip(<span class="string">b&#x27;DASCTF&#123;&#x27;</span>).rstrip(<span class="string">b&#x27;&#125;&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(FLAG) == <span class="number">15</span></span><br><span class="line">m = bytes_to_long(FLAG)</span><br><span class="line"><span class="keyword">assert</span> m &lt; p</span><br><span class="line">Q = mul_THcurve(m, G)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Q =&quot;</span>, Q)</span><br><span class="line"><span class="comment"># Q = (6784278627340957151283066249316785477882888190582875173, 6078603759966354224428976716568980670702790051879661797)</span></span><br></pre></td></tr></table></figure><p>题目分析：</p><p>映射关系如下：</p><p><ahref="https://hyperelliptic.org/EFD/g1p/data/twistedhessian/coordinates">https://hyperelliptic.org/EFD/g1p/data/twistedhessian/coordinates</a></p><p>故该曲线为：</p><p><span class="math inline">\(a x^3+y^3+1=d x y\)</span></p><p><span class="math inline">\(2 x^3+y^3+1=d x y\)</span></p><p>通过点Q求出d来从而得到完整的曲线方程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d = (a * Q[<span class="number">0</span>] ** <span class="number">3</span> + Q[<span class="number">1</span>] ** <span class="number">3</span> + <span class="number">1</span>) * inverse(Q[<span class="number">0</span>] * Q[<span class="number">1</span>], p) % p</span><br></pre></td></tr></table></figure><p>接下来解题思路参考：<ahref="https://tangcuxiaojikuai.xyz/post/a6ee3e0e.html">https://tangcuxiaojikuai.xyz/post/a6ee3e0e.html</a></p><p>通过以下方式换元：<span class="math inline">\(x =\frac{x&#39;}{z&#39;}，y = \frac{y&#39;}{z&#39;}\)</span></p><p>从而转换成以下三次齐次方程形式：<span class="math inline">\(2x&#39;^3+ y&#39;^3 + z&#39;^3 \equiv dx&#39;y&#39;z&#39; \pmod p\)</span></p><p>构建出椭圆曲线后使用 Pohlig Hellman 即可解出 Q = mG 中的 m</p><p><code>exp:</code> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">10297529403524403127640670200603184608844065065952536889</span></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line">P = (<span class="number">8879931045098533901543131944615620692971716807984752065</span>, <span class="number">4106024239449946134453673742202491320614591684229547464</span>)</span><br><span class="line">Q = (<span class="number">6784278627340957151283066249316785477882888190582875173</span>, <span class="number">6078603759966354224428976716568980670702790051879661797</span>)</span><br><span class="line">d = (a * Q[<span class="number">0</span>] ** <span class="number">3</span> + Q[<span class="number">1</span>] ** <span class="number">3</span> + <span class="number">1</span>) * inverse(Q[<span class="number">0</span>] * Q[<span class="number">1</span>], p) % p</span><br><span class="line"></span><br><span class="line"><span class="comment"># construct ECC to get a solution of 2X^3+Y^3+Z^3=dXYZ</span></span><br><span class="line">R.&lt;x,y,z&gt; = Zmod(p)[]</span><br><span class="line">cubic = <span class="number">2</span> * x^<span class="number">3</span> + y^<span class="number">3</span> + z^<span class="number">3</span> - d*x*y*z</span><br><span class="line">E = EllipticCurve_from_cubic(cubic,morphism=<span class="literal">True</span>)</span><br><span class="line">P = E(P)</span><br><span class="line">Q = E(Q)</span><br><span class="line">P_ord = P.order()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Pohlig_Hellman</span>(<span class="params">n,P,Q</span>):</span><br><span class="line">    factors, exponents = <span class="built_in">zip</span>(*factor(n))</span><br><span class="line">    primes = [factors[i] ^ exponents[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(factors))][:-<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(primes)</span><br><span class="line">    dlogs = []</span><br><span class="line">    <span class="keyword">for</span> fac <span class="keyword">in</span> primes:</span><br><span class="line">        t = <span class="built_in">int</span>(<span class="built_in">int</span>(P.order()) // <span class="built_in">int</span>(fac))</span><br><span class="line">        dlog = discrete_log(t*Q,t*P,operation=<span class="string">&quot;+&quot;</span>)</span><br><span class="line">        dlogs += [dlog]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;factor: &quot;</span>+<span class="built_in">str</span>(fac)+<span class="string">&quot;, Discrete Log: &quot;</span>+<span class="built_in">str</span>(dlog)) <span class="comment">#calculates discrete logarithm for each prime order</span></span><br><span class="line">    num2 = crt(dlogs,primes)</span><br><span class="line">    <span class="keyword">return</span> num2</span><br><span class="line"></span><br><span class="line">num2 = Pohlig_Hellman(P_ord,P,Q)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(num2))</span><br></pre></td></tr></table></figure></p><h2 id="baby_curve">baby_Curve</h2><p>题目描述：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> c, b, key, FLAG</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_curve</span>(<span class="params">P, Q, K</span>):</span><br><span class="line">    a, d, p = K</span><br><span class="line">    <span class="keyword">if</span> P == (<span class="number">0</span>, <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> Q</span><br><span class="line">    <span class="keyword">if</span> Q == (<span class="number">0</span>, <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> P</span><br><span class="line">    x1, y1 = P</span><br><span class="line">    x2, y2 = Q</span><br><span class="line">    x3 = (x1 * y2 + y1 * x2) * <span class="built_in">pow</span>(<span class="number">1</span> - d * x1 ** <span class="number">2</span> * x2 ** <span class="number">2</span>, -<span class="number">1</span>, p) % p</span><br><span class="line">    y3 = ((y1 * y2 + <span class="number">2</span> * a * x1 * x2) * (<span class="number">1</span> + d * x1 ** <span class="number">2</span> * x2 ** <span class="number">2</span>) + <span class="number">2</span> * d * x1 * x2 * (x1 ** <span class="number">2</span> + x2 ** <span class="number">2</span>)) * <span class="built_in">pow</span>(</span><br><span class="line">        (<span class="number">1</span> - d * x1 ** <span class="number">2</span> * x2 ** <span class="number">2</span>) ** <span class="number">2</span>, -<span class="number">1</span>, p) % p</span><br><span class="line">    <span class="keyword">return</span> x3, y3</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul_curve</span>(<span class="params">n, P, K</span>):</span><br><span class="line">    R = (<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            R = add_curve(R, P, K)</span><br><span class="line">        P = add_curve(P, P, K)</span><br><span class="line">        n = n // <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> R</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AES_encrypt</span>(<span class="params">k</span>):</span><br><span class="line">    key = hashlib.sha256(<span class="built_in">str</span>(k).encode()).digest()[:<span class="number">16</span>]</span><br><span class="line">    iv = os.urandom(<span class="number">16</span>)</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    cipher = cipher.encrypt(pad(FLAG, <span class="number">16</span>))</span><br><span class="line">    data = &#123;&#125;</span><br><span class="line">    data[<span class="string">&quot;iv&quot;</span>] = iv.<span class="built_in">hex</span>()</span><br><span class="line">    data[<span class="string">&quot;cipher&quot;</span>] = cipher.<span class="built_in">hex</span>()</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">a = <span class="number">46</span></span><br><span class="line">d = <span class="number">20</span></span><br><span class="line">p1 = <span class="number">826100030683243954408990060837</span></span><br><span class="line">K1 = (a, d, p1)</span><br><span class="line">G1 = (<span class="number">560766116033078013304693968735</span>, <span class="number">756416322956623525864568772142</span>)</span><br><span class="line">P1 = mul_curve(c, G1, K1)</span><br><span class="line">Q1 = mul_curve(b, G1, K1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;P1 =&quot;</span>, P1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Q1 =&quot;</span>, Q1)</span><br><span class="line"><span class="comment"># P1 = (528578510004630596855654721810, 639541632629313772609548040620)</span></span><br><span class="line"><span class="comment"># Q1 = (819520958411405887240280598475, 76906957256966244725924513645)</span></span><br><span class="line"></span><br><span class="line">p = <span class="number">770311352827455849356512448287</span></span><br><span class="line">E = EllipticCurve(GF(p), [-c, b])</span><br><span class="line">G = E.gens()[<span class="number">0</span>]</span><br><span class="line">P = G * key</span><br><span class="line">data = AES_encrypt(key)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;G =&quot;</span>, G)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;P =&quot;</span>, P)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;data =&quot;</span>,data)</span><br><span class="line"><span class="comment"># G = (584273268656071313022845392380 : 105970580903682721429154563816 : 1)</span></span><br><span class="line"><span class="comment"># P = (401055814681171318348566474726 : 293186309252428491012795616690 : 1)</span></span><br><span class="line"><span class="comment"># data = &#123;&#x27;iv&#x27;: &#x27;bae1b42f174443d009c8d3a1576f07d6&#x27;, &#x27;cipher&#x27;: &#x27;ff34da7a65854ed75342fd4ad178bf577bd622df9850a24fd63e1da557b4b8a4&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>题目分析：</p><p>解方程得c，b（或者爆破），然后。。。sagemath10.4解、、</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">p = <span class="number">770311352827455849356512448287</span></span><br><span class="line">x1, y1 = (<span class="number">584273268656071313022845392380</span>, <span class="number">105970580903682721429154563816</span>)</span><br><span class="line">x2, y2 = (<span class="number">401055814681171318348566474726</span>, <span class="number">293186309252428491012795616690</span>)</span><br><span class="line">c = ((y1 ** <span class="number">2</span> - x1 ** <span class="number">3</span>) - (y2 ** <span class="number">2</span> - x2 ** <span class="number">3</span>)) * inverse(x1 - x2, p) % p</span><br><span class="line">b = (y1 ** <span class="number">2</span> - x1 ** <span class="number">3</span> - c * x1) % p</span><br><span class="line">E = EllipticCurve(GF(p), [c, b])</span><br><span class="line">G = E(x1 ,y1)</span><br><span class="line">P = E(x2 ,y2)</span><br><span class="line">k = P.log(G) <span class="comment"># 2951856998192356</span></span><br><span class="line">iv = <span class="number">0xbae1b42f174443d009c8d3a1576f07d6</span></span><br><span class="line">cipher = <span class="number">0xff34da7a65854ed75342fd4ad178bf577bd622df9850a24fd63e1da557b4b8a4</span></span><br><span class="line">key = hashlib.sha256(<span class="built_in">str</span>(k).encode()).digest()[:<span class="number">16</span>]</span><br><span class="line">aes = AES.new(key, AES.MODE_CBC, long_to_bytes(iv))</span><br><span class="line">m = aes.decrypt(long_to_bytes(cipher))</span><br><span class="line"><span class="built_in">print</span>(m)</span><br></pre></td></tr></table></figure><p>或者网页版<ahref="https://sagecell.sagemath.org/">https://sagecell.sagemath.org/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="number">770311352827455849356512448287</span></span><br><span class="line">E = EllipticCurve(GF(p), [-<span class="number">35</span>, <span class="number">98</span>])</span><br><span class="line">G = E(<span class="number">584273268656071313022845392380</span>, <span class="number">105970580903682721429154563816</span>)</span><br><span class="line">P = E(<span class="number">401055814681171318348566474726</span>, <span class="number">293186309252428491012795616690</span>)</span><br><span class="line">k = G.discrete_log(P)</span><br><span class="line"><span class="built_in">print</span>(k) <span class="comment"># 2951856998192356</span></span><br></pre></td></tr></table></figure><h2 id="rsa_loss">RSA_loss</h2><p>题目描述：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line">p = getPrime(<span class="number">100</span>)</span><br><span class="line">q = getPrime(<span class="number">100</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">message = <span class="string">b&quot;&quot;</span></span><br><span class="line">m = bytes_to_long(message)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;p = <span class="subst">&#123;p&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;q = <span class="subst">&#123;q&#125;</span>&#x27;</span>)</span><br><span class="line">d = invert(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">newm = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(newm))</span><br><span class="line"><span class="comment"># c = 356435791209686635044593929546092486613929446770721636839137</span></span><br><span class="line"><span class="comment"># p = 898278915648707936019913202333</span></span><br><span class="line"><span class="comment"># q = 814090608763917394723955024893</span></span><br><span class="line"><span class="comment"># newm = b&#x27;X\xee\x1ey\x88\x01dX\xf6i\x91\x80h\xf4\x1f!\xa7&quot;\x0c\x9a\x06\xc8\x06\x81\x15&#x27;</span></span><br></pre></td></tr></table></figure><p>题目分析：</p><p><span class="math inline">\(得到的newm !=message，说明message比n大\)</span></p><p><spanclass="math inline">\(试着去简单(+kn)爆破一下没有爆出来\)</span></p><p><spanclass="math inline">\(说明message应该比n大不少，既然如此那就去爆破message里面的每一位\)</span></p><p>参考：<ahref="https://tangcuxiaojikuai.xyz/post/94c7e291.html">https://tangcuxiaojikuai.xyz/post/94c7e291.html</a></p><p>猜测 <span class="math inline">\(message \in [0-9, a-z, A-Z,\_]\)</span></p><p>那么对应的ascii码就在48~128里面</p><p>假设message长度为le</p><p>那么：<span class="math inline">\(newm = c =  256^{(le - 7)} * pre +256 * m_0 + suf\)</span></p><p>(其中pre = b'DASCTF{'，suf = b'}'，m0为中间未知的数字串)</p><p>得到：<span class="math inline">\(m_0 \equiv 256^{-1} * (c - 256^{(le- 7)} * pre - suf) \pmod p\)</span></p><p>又：<span class="math inline">\(m_0 \equiv \sum_{i = 0}^{len - 7 - 1- 1} 256^i * s_i \pmod p\)</span></p><p>得到：<span class="math inline">\(m_0 \equiv \sum_{i = 0}^{len - 7 -1 - 1} 256^i * s_i + k * p\)</span></p><p>构造如下格（为了保证能规约出0，做题时可以给格的最后一列配上个大系数）：</p><p><span class="math display">\[M = \begin{pmatrix}1&amp;&amp;&amp;&amp;&amp;1\\&amp;1&amp;&amp;&amp;&amp;256\\&amp;&amp;\ddots&amp;&amp;&amp;\vdots\\&amp;&amp;&amp;1&amp;&amp;256^{le - 9}\\&amp;&amp;&amp;&amp;1&amp;-m_0\\&amp;&amp;&amp;&amp;&amp;p\end{pmatrix}\]</span></p><p>有：<span class="math inline">\((s_0,s_1,...,s_{(le - 9)}, 1, k) * M= (s_0,s_1,...,s_{(le-9)}, 1, 0)\)</span></p><p>此时：<span class="math inline">\(s_i \in (48, 128)\)</span></p><p>有点大，优化一下：<span class="math inline">\(t_i = s_i -48\)</span></p><p>得到：<span class="math inline">\(m_0 \equiv \sum_{i = 0}^{len - 9}256^i * (t_i  + 48) \pmod p\)</span></p><p>得到：<span class="math inline">\(m_0 - 48 * \sum_{i = 0}^{len - 9}256^i = \sum_{i = 0}^{len - 9} 256^i * t_i = m_1\)</span></p><p>此时 <span class="math inline">\(t_i \in (0,80)，目标向量为：(t_0,t_1,...,t_{(le-9)}, 1, 0)\)</span></p><p>测试之后发现只有在 <span class="math inline">\(le &lt;= 33\)</span>才能出结果，带入题中数据没得到结果说明 <spanclass="math inline">\(len(flag) &gt; 33\)</span></p><p>既然如此，再优化下：<span class="math inline">\(t_i = s_i - 48 -40\)</span></p><p>得到：<span class="math inline">\(m_0 \equiv \sum_{i = 0}^{len - 9}256^i * (t_i  + 48 + 40) \pmod p\)</span></p><p>此时：<span class="math inline">\(t_i \in (-40,40)，目标向量为：(t_0,t_1,...,t_{(le-9)}, 1, 0)\)</span></p><p>正好，能出</p><p><code>exp:</code> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p1 = <span class="number">898278915648707936019913202333</span></span><br><span class="line">q1 = <span class="number">814090608763917394723955024893</span></span><br><span class="line">newm = bytes_to_long(<span class="string">b&#x27;X\xee\x1ey\x88\x01dX\xf6i\x91\x80h\xf4\x1f!\xa7&quot;\x0c\x9a\x06\xc8\x06\x81\x15&#x27;</span>)</span><br><span class="line">p = p1 * q1</span><br><span class="line">c = newm</span><br><span class="line"></span><br><span class="line">prefix = <span class="string">b&quot;DASCTF&#123;&quot;</span></span><br><span class="line">suffix = <span class="string">b&quot;&#125;&quot;</span></span><br><span class="line"><span class="keyword">for</span> le <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>, <span class="number">40</span>):</span><br><span class="line">    length = le - <span class="built_in">len</span>(prefix) - <span class="built_in">len</span>(suffix)</span><br><span class="line">    <span class="comment">#part1 remove prefix and suffix</span></span><br><span class="line">    c -= <span class="number">256</span>^(<span class="built_in">len</span>(suffix) + length) * bytes_to_long(prefix)</span><br><span class="line">    c -= bytes_to_long(suffix)</span><br><span class="line">    c = c * inverse(<span class="number">256</span>,p) % p</span><br><span class="line"></span><br><span class="line">    L = Matrix(ZZ,length+<span class="number">2</span>,length+<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        L[i,i] = <span class="number">1</span></span><br><span class="line">        L[i,-<span class="number">1</span>] = <span class="number">256</span>^i</span><br><span class="line">        c -= <span class="number">256</span>^i*<span class="number">48</span></span><br><span class="line">        c -= <span class="number">256</span>^i*<span class="number">40</span></span><br><span class="line"></span><br><span class="line">    L[-<span class="number">2</span>,-<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line">    L[-<span class="number">2</span>,-<span class="number">1</span>] = -c</span><br><span class="line">    L[-<span class="number">1</span>,-<span class="number">1</span>] = p</span><br><span class="line">    L[:,-<span class="number">1</span>:] *= p</span><br><span class="line">    res = L.BKZ()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> res[:-<span class="number">1</span>]:</span><br><span class="line">        flag = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">all</span>(<span class="built_in">abs</span>(j) &lt;= <span class="number">40</span> <span class="keyword">for</span> j <span class="keyword">in</span> i[:-<span class="number">2</span>])):</span><br><span class="line">            <span class="keyword">if</span>(i[-<span class="number">2</span>] == <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> i[:-<span class="number">2</span>][::-<span class="number">1</span>]:</span><br><span class="line">                    flag += <span class="built_in">chr</span>(<span class="number">48</span> + <span class="number">40</span> + j)</span><br><span class="line">            <span class="keyword">elif</span> i[-<span class="number">2</span>] == -<span class="number">1</span>:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> i[:-<span class="number">2</span>][::-<span class="number">1</span>]:</span><br><span class="line">                    flag += <span class="built_in">chr</span>(<span class="number">48</span> + <span class="number">40</span> - j)</span><br><span class="line">        <span class="keyword">if</span>(flag != <span class="string">&quot;&quot;</span>):</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">    c = newm</span><br><span class="line"><span class="comment"># o0p5_m3ssaGe_to0_b1g_nv93nd0</span></span><br></pre></td></tr></table></figure></p><h2 id="theoremplus">TheoremPlus</h2><p>题目描述：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode_e</span>(<span class="params">e</span>):</span><br><span class="line">    <span class="keyword">if</span> e &gt; <span class="number">1</span>:</span><br><span class="line">        mul = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, e):</span><br><span class="line">            mul *= i</span><br><span class="line">        <span class="keyword">if</span> e - mul % e - <span class="number">1</span> == <span class="number">0</span>:</span><br><span class="line">            mulmod = mul % e - e</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            mulmod = mul % e</span><br><span class="line">        <span class="keyword">return</span> mulmod + decode_e(e - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">p = next_prime(q)</span><br><span class="line">n = p * q</span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">e = <span class="built_in">abs</span>(decode_e(<span class="number">703440151</span>))</span><br><span class="line">c = <span class="built_in">pow</span>(bytes_to_long(flag), e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n = &#123;&#125;\n&#x27;</span></span><br><span class="line">      <span class="string">&#x27;c = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(n, c))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 18770575776346636857117989716700159556553308603827318013591587255198383129370907809760732011993542700529211200756354110539398800399971400004000898098091275284235225898698802555566416862975758535452624647017057286675078425814784682675012671384340267087604803050995107534481069279281213277371234272710195280647747033302773076094600917583038429969629948198841325080329081838681126456119415461246986745162687569680825296434756908111148165787768172000131704615314046005916223370429567142992192702888820837032850104701948658736010527261246199512595520995042205818856177310544178940343722756848658912946025299687434514029951</span></span><br><span class="line"><span class="string">c = 2587907790257921446754254335909686808394701314827194535473852919883847207482301560195700622542784316421967768148156146355099210400053281966782598551680260513547233270646414440776109941248869185612357797869860293880114609649325409637239631730174236109860697072051436591823617268725493768867776466173052640366393488873505207198770497373345116165334779381031712832136682178364090547875479645094274237460342318587832274304777193468833278816459344132231018703578274192000016560653148923056635076144189403004763127515475672112627790796376564776321840115465990308933303392198690356639928538984862967102082126458529748355566</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>题目分析：</p><p>函数 <code>decode_e(a)</code> 中的逻辑：</p><blockquote><p><span class="math inline">\(如果(a - 1)的阶乘\ mul \equiv (a - 1)!\equiv -1 \pmod a, 那么\ mulmod = -1，否则\ mulmod = mul\%a\)</span></p></blockquote><p><span class="math inline">\(\text{威尔逊定理：对于素数 }p\text{ 有}(p-1)!\equiv-1\pmod{p}\)</span></p><p>所以(1, a)范围内的数字中，素数的mulmod = -1</p><p>那么接下来看看合数的mulmod，合数一定能由小于它的数组成，或者说合数一定能由小于它的素数组成（4除外），比如6 = 2 * 3，8 = 2 * 4 = 2 * 2 * 2，...</p><p><span class="math inline">\(故 如果e为合数（4除外），那么一定有(e -1) ! = k * e（感叹号为阶乘符号），所以此时的\ mulmod = mul \% e =k * e\%e = 0\)</span></p><p>可以去打印一下看看，也是符合的：</p><p>既然如此，那么我们只要知道在1~703440151中有多少个素数，我们就能求出e</p><p><code>exp:</code> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> primepi</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line">n = <span class="number">18770575776346636857117989716700159556553308603827318013591587255198383129370907809760732011993542700529211200756354110539398800399971400004000898098091275284235225898698802555566416862975758535452624647017057286675078425814784682675012671384340267087604803050995107534481069279281213277371234272710195280647747033302773076094600917583038429969629948198841325080329081838681126456119415461246986745162687569680825296434756908111148165787768172000131704615314046005916223370429567142992192702888820837032850104701948658736010527261246199512595520995042205818856177310544178940343722756848658912946025299687434514029951</span></span><br><span class="line">c = <span class="number">2587907790257921446754254335909686808394701314827194535473852919883847207482301560195700622542784316421967768148156146355099210400053281966782598551680260513547233270646414440776109941248869185612357797869860293880114609649325409637239631730174236109860697072051436591823617268725493768867776466173052640366393488873505207198770497373345116165334779381031712832136682178364090547875479645094274237460342318587832274304777193468833278816459344132231018703578274192000016560653148923056635076144189403004763127515475672112627790796376564776321840115465990308933303392198690356639928538984862967102082126458529748355566</span></span><br><span class="line">e = primepi(<span class="number">703440151</span>) - <span class="number">2</span></span><br><span class="line">p = next_prime(iroot(n,<span class="number">2</span>)[<span class="number">0</span>])</span><br><span class="line">q = n // p</span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = invert(<span class="built_in">int</span>(e), phi)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, d, n)))</span><br></pre></td></tr></table></figure> 浅记一下：</p><p><code>关键词:</code> ECC，curve，G.discrete_log( P)，PohligHellman，格，优化，阶乘，primepi</p>]]></content>
      
      
      
        <tags>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[DASCTF 2024 暑期挑战赛] Crypto</title>
      <link href="/2024/07/22/DASCTF-2024-%E6%9A%91%E6%9C%9F%E6%8C%91%E6%88%98%E8%B5%9B-Crypto/"/>
      <url>/2024/07/22/DASCTF-2024-%E6%9A%91%E6%9C%9F%E6%8C%91%E6%88%98%E8%B5%9B-Crypto/</url>
      
        <content type="html"><![CDATA[<p>周六打了下DASCTF</p><p>没了</p><h2 id="complex_enc">complex_enc</h2><p>题目描述： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GET_KEY</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="built_in">sum</span>=<span class="number">2</span></span><br><span class="line">    key=[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        r=random.randint(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">        x=<span class="built_in">sum</span>+random.randint(<span class="number">0</span>,n)*r</span><br><span class="line">        key.append(x)</span><br><span class="line">        <span class="built_in">sum</span>+=x</span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">m,k</span>):</span><br><span class="line">    cipher_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">        <span class="keyword">if</span> m[i] == <span class="number">1</span>:</span><br><span class="line">            cipher_list.append(m[i] * k[i])</span><br><span class="line">    cipher = <span class="built_in">sum</span>(cipher_list)</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line">m = [<span class="built_in">int</span>(bit) <span class="keyword">for</span> byte <span class="keyword">in</span> flag <span class="keyword">for</span> bit <span class="keyword">in</span> <span class="built_in">format</span>(byte, <span class="string">&#x27;08b&#x27;</span>)]</span><br><span class="line">key=GET_KEY(<span class="built_in">len</span>(m))</span><br><span class="line">c=enc(m,key)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="built_in">str</span>(c))</span><br><span class="line">    f.write(<span class="built_in">str</span>(key))</span><br></pre></td></tr></table></figure> 题目分析：</p><p>超递增序列</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">c = <span class="number">287687761937146187597379915545639385740275457170939564210821293233370716878150576</span></span><br><span class="line">key = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">87</span>, <span class="number">99</span>, <span class="number">190</span>, <span class="number">380</span>, <span class="number">760</span>, <span class="number">1702</span>, <span class="number">3350</span>, <span class="number">6712</span>, <span class="number">13302</span>, <span class="number">26669</span>, <span class="number">53257</span>, <span class="number">106512</span>, <span class="number">213212</span>, <span class="number">426262</span>, <span class="number">852583</span>, <span class="number">1705083</span>, <span class="number">3410164</span>, <span class="number">6820581</span>, <span class="number">13640909</span>, <span class="number">27281818</span>, <span class="number">54563749</span>, <span class="number">109127508</span>, <span class="number">218254958</span>, <span class="number">436509851</span>, <span class="number">873019897</span>, <span class="number">1746039768</span>, <span class="number">3492079367</span>, <span class="number">6984158992</span>, <span class="number">13968317822</span>, <span class="number">27936635563</span>, <span class="number">55873271257</span>, <span class="number">111746542368</span>, <span class="number">223493084736</span>, <span class="number">446986169472</span>, <span class="number">893972338944</span>, <span class="number">1787944677888</span>, <span class="number">3575889355776</span>, <span class="number">7151778711750</span>, <span class="number">14303557423366</span>, <span class="number">28607114846668</span>, <span class="number">57214229693336</span>, <span class="number">114428459386792</span>, <span class="number">228856918773559</span>, <span class="number">457713837547023</span>, <span class="number">915427675094046</span>, <span class="number">1830855350188252</span>, <span class="number">3661710700376344</span>, <span class="number">7323421400752912</span>, <span class="number">14646842801505675</span>, <span class="number">29293685603011275</span>, <span class="number">58587371206022773</span>, <span class="number">117174742412045483</span>, <span class="number">234349484824090806</span>, <span class="number">468698969648181659</span>, <span class="number">937397939296363271</span>, <span class="number">1874795878592726601</span>, <span class="number">3749591757185453143</span>, <span class="number">7499183514370906547</span>, <span class="number">14998367028741812852</span>, <span class="number">29996734057483625898</span>, <span class="number">59993468114967251756</span>, <span class="number">119986936229934503501</span>, <span class="number">239973872459869007099</span>, <span class="number">479947744919738013939</span>, <span class="number">959895489839476027878</span>, <span class="number">1919790979678952055983</span>, <span class="number">3839581959357904111739</span>, <span class="number">7679163918715808223719</span>, <span class="number">15358327837431616447319</span>, <span class="number">30716655674863232894717</span>, <span class="number">61433311349726465789458</span>, <span class="number">122866622699452931578804</span>, <span class="number">245733245398905863157495</span>, <span class="number">491466490797811726314990</span>, <span class="number">982932981595623452629980</span>, <span class="number">1965865963191246905260222</span>, <span class="number">3931731926382493810520182</span>, <span class="number">7863463852764987621040623</span>, <span class="number">15726927705529975242080987</span>, <span class="number">31453855411059950484161974</span>, <span class="number">62907710822119900968323970</span>, <span class="number">125815421644239801936647918</span>, <span class="number">251630843288479603873295836</span>, <span class="number">503261686576959207746591710</span>, <span class="number">1006523373153918415493183613</span>, <span class="number">2013046746307836830986367190</span>, <span class="number">4026093492615673661972734253</span>, <span class="number">8052186985231347323945468456</span>, <span class="number">16104373970462694647890936894</span>, <span class="number">32208747940925389295781874025</span>, <span class="number">64417495881850778591563748059</span>, <span class="number">128834991763701557183127495888</span>, <span class="number">257669983527403114366254991760</span>, <span class="number">515339967054806228732509983520</span>, <span class="number">1030679934109612457465019967093</span>, <span class="number">2061359868219224914930039934133</span>, <span class="number">4122719736438449829860079868450</span>, <span class="number">8245439472876899659720159736935</span>, <span class="number">16490878945753799319440319473651</span>, <span class="number">32981757891507598638880638947330</span>, <span class="number">65963515783015197277761277894728</span>, <span class="number">131927031566030394555522555789579</span>, <span class="number">263854063132060789111045111579109</span>, <span class="number">527708126264121578222090223158048</span>, <span class="number">1055416252528243156444180446316096</span>, <span class="number">2110832505056486312888360892632193</span>, <span class="number">4221665010112972625776721785264450</span>, <span class="number">8443330020225945251553443570528835</span>, <span class="number">16886660040451890503106887141057670</span>, <span class="number">33773320080903781006213774282115477</span>, <span class="number">67546640161807562012427548564230882</span>, <span class="number">135093280323615124024855097128461699</span>, <span class="number">270186560647230248049710194256923398</span>, <span class="number">540373121294460496099420388513846796</span>, <span class="number">1080746242588920992198840777027693592</span>, <span class="number">2161492485177841984397681554055387246</span>, <span class="number">4322984970355683968795363108110774528</span>, <span class="number">8645969940711367937590726216221549105</span>, <span class="number">17291939881422735875181452432443098117</span>, <span class="number">34583879762845471750362904864886196180</span>, <span class="number">69167759525690943500725809729772392360</span>, <span class="number">138335519051381887001451619459544784838</span>, <span class="number">276671038102763774002903238919089569616</span>, <span class="number">553342076205527548005806477838179139174</span>, <span class="number">1106684152411055096011612955676358278348</span>, <span class="number">2213368304822110192023225911352716556750</span>, <span class="number">4426736609644220384046451822705433113446</span>, <span class="number">8853473219288440768092903645410866226907</span>, <span class="number">17706946438576881536185807290821732453830</span>, <span class="number">35413892877153763072371614581643464907890</span>, <span class="number">70827785754307526144743229163286929815519</span>, <span class="number">141655571508615052289486458326573859631099</span>, <span class="number">283311143017230104578972916653147719262229</span>, <span class="number">566622286034460209157945833306295438524626</span>, <span class="number">1133244572068920418315891666612590877049074</span>, <span class="number">2266489144137840836631783333225181754098066</span>, <span class="number">4532978288275681673263566666450363508196132</span>, <span class="number">9065956576551363346527133332900727016392264</span>, <span class="number">18131913153102726693054266665801454032784553</span>, <span class="number">36263826306205453386108533331602908065569081</span>, <span class="number">72527652612410906772217066663205816131138180</span>, <span class="number">145055305224821813544434133326411632262276342</span>, <span class="number">290110610449643627088868266652823264524552684</span>, <span class="number">580221220899287254177736533305646529049105368</span>, <span class="number">1160442441798574508355473066611293058098210736</span>, <span class="number">2320884883597149016710946133222586116196421472</span>, <span class="number">4641769767194298033421892266445172232392842944</span>, <span class="number">9283539534388596066843784532890344464785686063</span>, <span class="number">18567079068777192133687569065780688929571371951</span>, <span class="number">37134158137554384267375138131561377859142743902</span>, <span class="number">74268316275108768534750276263122755718285487804</span>, <span class="number">148536632550217537069500552526245511436570975608</span>, <span class="number">297073265100435074139001105052491022873141951360</span>, <span class="number">594146530200870148278002210104982045746283902576</span>, <span class="number">1188293060401740296556004420209964091492567805360</span>, <span class="number">2376586120803480593112008840419928182985135610512</span>, <span class="number">4753172241606961186224017680839856365970271221024</span>, <span class="number">9506344483213922372448035361679712731940542442048</span>, <span class="number">19012688966427844744896070723359425463881084884096</span>, <span class="number">38025377932855689489792141446718850927762169768220</span>, <span class="number">76050755865711378979584282893437701855524339536412</span>, <span class="number">152101511731422757959168565786875403711048679072824</span>, <span class="number">304203023462845515918337131573750807422097358145648</span>, <span class="number">608406046925691031836674263147501614844194716291296</span>, <span class="number">1216812093851382063673348526295003229688389432582797</span>, <span class="number">2433624187702764127346697052590006459376778865165617</span>, <span class="number">4867248375405528254693394105180012918753557730331006</span>, <span class="number">9734496750811056509386788210360025837507115460662129</span>, <span class="number">19468993501622113018773576420720051675014230921324265</span>, <span class="number">38937987003244226037547152841440103350028461842648406</span>, <span class="number">77875974006488452075094305682880206700056923685296910</span>, <span class="number">155751948012976904150188611365760413400113847370593722</span>, <span class="number">311503896025953808300377222731520826800227694741187444</span>, <span class="number">623007792051907616600754445463041653600455389482374933</span>, <span class="number">1246015584103815233201508890926083307200910778964749821</span>, <span class="number">2492031168207630466403017781852166614401821557929499642</span>, <span class="number">4984062336415260932806035563704333228803643115858999284</span>, <span class="number">9968124672830521865612071127408666457607286231717998666</span>, <span class="number">19936249345661043731224142254817332915214572463435997301</span>, <span class="number">39872498691322087462448284509634665830429144926871994535</span>, <span class="number">79744997382644174924896569019269331660858289853743989190</span>, <span class="number">159489994765288349849793138038538663321716579707487978260</span>, <span class="number">318979989530576699699586276077077326643433159414975956596</span>, <span class="number">637959979061153399399172552154154653286866318829951913129</span>, <span class="number">1275919958122306798798345104308309306573732637659903826311</span>, <span class="number">2551839916244613597596690208616618613147465275319807652591</span>, <span class="number">5103679832489227195193380417233237226294930550639615305147</span>, <span class="number">10207359664978454390386760834466474452589861101279230610294</span>, <span class="number">20414719329956908780773521668932948905179722202558461220588</span>, <span class="number">40829438659913817561547043337865897810359444405116922441176</span>, <span class="number">81658877319827635123094086675731795620718888810233844882508</span>, <span class="number">163317754639655270246188173351463591241437777620467689764860</span>, <span class="number">326635509279310540492376346702927182482875555240935379529854</span>, <span class="number">653271018558621080984752693405854364965751110481870759059704</span>, <span class="number">1306542037117242161969505386811708729931502220963741518119363</span>, <span class="number">2613084074234484323939010773623417459863004441927483036238705</span>, <span class="number">5226168148468968647878021547246834919726008883854966072477346</span>, <span class="number">10452336296937937295756043094493669839452017767709932144954692</span>, <span class="number">20904672593875874591512086188987339678904035535419864289909384</span>, <span class="number">41809345187751749183024172377974679357808071070839728579818768</span>, <span class="number">83618690375503498366048344755949358715616142141679457159637536</span>, <span class="number">167237380751006996732096689511898717431232284283358914319275072</span>, <span class="number">334474761502013993464193379023797434862464568566717828638550144</span>, <span class="number">668949523004027986928386758047594869724929137133435657277100288</span>, <span class="number">1337899046008055973856773516095189739449858274266871314554200576</span>, <span class="number">2675798092016111947713547032190379478899716548533742629108401375</span>, <span class="number">5351596184032223895427094064380758957799433097067485258216802527</span>, <span class="number">10703192368064447790854188128761517915598866194134970516433605054</span>, <span class="number">21406384736128895581708376257523035831197732388269941032867210108</span>, <span class="number">42812769472257791163416752515046071662395464776539882065734420216</span>, <span class="number">85625538944515582326833505030092143324790929553079764131468840607</span>, <span class="number">171251077889031164653667010060184286649581859106159528262937681073</span>, <span class="number">342502155778062329307334020120368573299163718212319056525875362112</span>, <span class="number">685004311556124658614668040240737146598327436424638113051750724224</span>, <span class="number">1370008623112249317229336080481474293196654872849276226103501448448</span>, <span class="number">2740017246224498634458672160962948586393309745698552452207002896896</span>, <span class="number">5480034492448997268917344321925897172786619491397104904414005793914</span>, <span class="number">10960068984897994537834688643851794345573238982794209808828011587706</span>, <span class="number">21920137969795989075669377287703588691146477965588419617656023175412</span>, <span class="number">43840275939591978151338754575407177382292955931176839235312046350824</span>, <span class="number">87680551879183956302677509150814354764585911862353678470624092701691</span>, <span class="number">175361103758367912605355018301628709529171823724707356941248185403485</span>, <span class="number">350722207516735825210710036603257419058343647449414713882496370806824</span>, <span class="number">701444415033471650421420073206514838116687294898829427764992741613648</span>, <span class="number">1402888830066943300842840146413029676233374589797658855529985483227499</span>, <span class="number">2805777660133886601685680292826059352466749179595317711059970966454839</span>, <span class="number">5611555320267773203371360585652118704933498359190635422119941932909634</span>, <span class="number">11223110640535546406742721171304237409866996718381270844239883865819325</span>, <span class="number">22446221281071092813485442342608474819733993436762541688479767731638735</span>, <span class="number">44892442562142185626970884685216949639467986873525083376959535463277328</span>, <span class="number">89784885124284371253941769370433899278935973747050166753919070926554729</span>, <span class="number">179569770248568742507883538740867798557871947494100333507838141853109648</span>, <span class="number">359139540497137485015767077481735597115743894988200667015676283706219166</span>, <span class="number">718279080994274970031534154963471194231487789976401334031352567412438331</span>, <span class="number">1436558161988549940063068309926942388462975579952802668062705134824876530</span>, <span class="number">2873116323977099880126136619853884776925951159905605336125410269649753060</span>, <span class="number">5746232647954199760252273239707769553851902319811210672250820539299506381</span>, <span class="number">11492465295908399520504546479415539107703804639622421344501641078599012695</span>, <span class="number">22984930591816799041009092958831078215407609279244842689003282157198025444</span>, <span class="number">45969861183633598082018185917662156430815218558489685378006564314396050678</span>, <span class="number">91939722367267196164036371835324312861630437116979370756013128628792101318</span>, <span class="number">183879444734534392328072743670648625723260874233958741512026257257584202636</span>, <span class="number">367758889469068784656145487341297251446521748467917483024052514515168405272</span>, <span class="number">735517778938137569312290974682594502893043496935834966048105029030336810544</span>, <span class="number">1471035557876275138624581949365189005786086993871669932096210058060673621088</span>, <span class="number">2942071115752550277249163898730378011572173987743339864192420116121347242216</span>, <span class="number">5884142231505100554498327797460756023144347975486679728384840232242694484649</span>, <span class="number">11768284463010201108996655594921512046288695950973359456769680464485388969041</span>, <span class="number">23536568926020402217993311189843024092577391901946718913539360928970777938082</span>, <span class="number">47073137852040804435986622379686048185154783803893437827078721857941555876305</span>, <span class="number">94146275704081608871973244759372096370309567607786875654157443715883111752579</span>, <span class="number">188292551408163217743946489518744192740619135215573751308314887431766223505070</span>, <span class="number">376585102816326435487892979037488385481238270431147502616629774863532447010118</span>, <span class="number">753170205632652870975785958074976770962476540862295005233259549727064894020344</span>, <span class="number">1506340411265305741951571916149953541924953081724590010466519099454129788040580</span>, <span class="number">3012680822530611483903143832299907083849906163449180020933038198908259576081160</span>, <span class="number">6025361645061222967806287664599814167699812326898360041866076397816519152162452</span>, <span class="number">12050723290122445935612575329199628335399624653796720083732152795633038304324883</span>, <span class="number">24101446580244891871225150658399256670799249307593440167464305591266076608649853</span>, <span class="number">48202893160489783742450301316798513341598498615186880334928611182532153217299508</span>, <span class="number">96405786320979567484900602633597026683196997230373760669857222365064306434599262</span>, <span class="number">192811572641959134969801205267194053366393994460747521339714444730128612869198530</span>, <span class="number">385623145283918269939602410534388106732787988921495042679428889460257225738396863</span>]</span><br><span class="line"></span><br><span class="line">key_dict = &#123;i: key[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(key))&#125;</span><br><span class="line">tmp = [<span class="number">0</span>] * <span class="built_in">len</span>(key)</span><br><span class="line"><span class="keyword">for</span> index,i <span class="keyword">in</span> <span class="built_in">enumerate</span>(key[::-<span class="number">1</span>]):</span><br><span class="line">    <span class="keyword">if</span> c &gt;= i:</span><br><span class="line">        tmp[index] = <span class="number">1</span></span><br><span class="line">        c -= i</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> tmp[::-<span class="number">1</span>][:-<span class="number">1</span>]),<span class="number">2</span>)))</span><br></pre></td></tr></table></figure><h2 id="z_rsa">1z_RSA</h2><p>题目描述：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">nbit =<span class="number">130</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">l = getPrime(<span class="number">505</span>)</span><br><span class="line">m = bytes_to_long(flag + os.urandom(<span class="number">64</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">29</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    p, q = getPrime(nbit), getPrime(nbit)</span><br><span class="line">    PQ = <span class="built_in">int</span>(<span class="built_in">str</span>(p&lt;&lt;<span class="number">120</span>)+<span class="built_in">str</span>(q))</span><br><span class="line">    QP = <span class="built_in">int</span>(<span class="built_in">str</span>(q&lt;&lt;<span class="number">120</span>)+<span class="built_in">str</span>(p))</span><br><span class="line">    <span class="keyword">if</span> isPrime(PQ) <span class="keyword">and</span> isPrime(QP):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">n = PQ * QP</span><br><span class="line">PP = nextprime((PQ &gt;&gt; <span class="number">190</span>) * (QP &amp; (<span class="number">2</span> ** <span class="number">190</span> - <span class="number">1</span>)))</span><br><span class="line">QQ = nextprime((QP &gt;&gt; <span class="number">190</span>) * (PQ &amp; (<span class="number">2</span> ** <span class="number">190</span> - <span class="number">1</span>)))</span><br><span class="line">N = PP * QQ</span><br><span class="line">M = <span class="built_in">pow</span>(m,<span class="number">1</span>,l)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,N)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n =&#x27;</span>, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;M =&#x27;</span>, M)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;l =&#x27;</span>, l)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c =&#x27;</span>, c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 18339446336492672809908730785358232636383625709800392830207979464962269419140428722248172110017576390002616004691759163126532392634394976712779777822451878822759056304050545622761060245812934467784888422790178920804822224673755691</span></span><br><span class="line"><span class="string">M = 36208281423355218604990190624029584747447986456188203264389519699277658026754156377638444926063784368328407938562964768329134840563331354924365667733322</span></span><br><span class="line"><span class="string">l = 56911058350450672322326236658556745353275014753768458552003425206272938093282425278193278997347671093622024933189270932102361261551908054703317369295189</span></span><br><span class="line"><span class="string">c = 720286366572443009268610917990845759123049408295363966717060100862857351750759651979922104897091176824666482923148635058966589592286465060161271579501861264957611980854954664798904862706450723639237791023808177615189976108231923</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>题目分析： <span class="math display">\[\begin{align*}&amp;PQ = p * 2^{120} * 10^{40} + q\\&amp;QP = q * 2^{120} * 10^{39} + p\\&amp;n = PQ * QP = pq * (2^{240} * 10^{79} + 1) + (p^2 + 10 * q^2) *2^{120} * 10^{39}\\&amp;可以知道(2^{240} * 10^{79} + 1) &lt; (p^2 + 10 * q^2) * 2^{120} *10^{39}\\&amp;不过它们相差并不大，((p^2 + 10 * q^2) * 2^{120} *10^{39})//(2^{240} * 10^{79} + 1) = 一个很小的数a\\&amp;故pq = n // (2^{240} * 10^{79} + 1) - a\\&amp;爆破即可得到pq,得到pq后(p^2 + 10 * q^2)也就出来了\\&amp;之后解方程即可得到p,q,如此PQ和QP也就出来了\end{align*}\]</span></p><p>PS：p，q的10进制位数可能是39，也可能是40此处具体是什么可以通过n的位数来确定。（自行去测一测就知道了）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line">n = <span class="number">18339446336492672809908730785358232636383625709800392830207979464962269419140428722248172110017576390002616004691759163126532392634394976712779777822451878822759056304050545622761060245812934467784888422790178920804822224673755691</span></span><br><span class="line"></span><br><span class="line">nn = n // (<span class="number">2</span> ** <span class="number">240</span> * <span class="number">10</span> ** <span class="number">79</span> + <span class="number">1</span>)</span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nn - <span class="number">500</span>,nn + <span class="number">500</span>):</span><br><span class="line">    cnt += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(cnt)</span><br><span class="line">    <span class="keyword">if</span> (n - i * (<span class="number">2</span> ** <span class="number">240</span> * <span class="number">10</span> ** <span class="number">79</span> + <span class="number">1</span>)) % (<span class="number">2</span> ** <span class="number">120</span> * <span class="number">10</span> ** <span class="number">39</span>) == <span class="number">0</span>:</span><br><span class="line">        leak = (n - i * (<span class="number">2</span> ** <span class="number">240</span> * <span class="number">10</span> ** <span class="number">79</span> + <span class="number">1</span>)) // (<span class="number">2</span> ** <span class="number">120</span> * <span class="number">10</span> ** <span class="number">39</span>)</span><br><span class="line">        p,q = symbols(<span class="string">&#x27;p q&#x27;</span>)</span><br><span class="line">        res = solve([p ** <span class="number">2</span> + <span class="number">10</span> * q ** <span class="number">2</span> - leak, p * q - i],[p,q])</span><br><span class="line">        <span class="keyword">for</span> pp,qq <span class="keyword">in</span> res:</span><br><span class="line">            <span class="keyword">if</span> pp &gt; <span class="number">0</span> <span class="keyword">and</span> qq &gt; <span class="number">0</span>:</span><br><span class="line">                PQ = <span class="built_in">int</span>(<span class="built_in">str</span>(<span class="built_in">int</span>(pp) &lt;&lt; <span class="number">120</span>) + <span class="built_in">str</span>(<span class="built_in">int</span>(qq)))</span><br><span class="line">                QP = <span class="built_in">int</span>(<span class="built_in">str</span>(<span class="built_in">int</span>(qq) &lt;&lt; <span class="number">120</span>) + <span class="built_in">str</span>(<span class="built_in">int</span>(pp)))</span><br><span class="line">                <span class="built_in">print</span>(PQ)</span><br><span class="line">                <span class="built_in">print</span>(QP)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">PQ = 1612551962023919669547657045404858968387328704389406190014139631069342728192855604426214387476576649090490109822073</span></span><br><span class="line"><span class="string">QP = 11372933566416532007055156607134588768203078133513243807951567056424906260481213149261930568621267125437333569321667</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>PQ，QP得到之后N也就得到了 <span class="math display">\[\begin{align*}&amp;m的位数：(29 + 64) * 8 = 744\\&amp;可以知道m = M + k * l\\&amp;m-744bit,M-505bit,l-505bit\\&amp;=&gt;k-239bit，那么copper一下\\&amp;f = (M + k * l)^3\end{align*}\]</span> 未知位数239</p><p>大概粗略算一下：<span class="math inline">\(N - 760bit，760 * (1/3 -0.02) \approx 238\)</span>，接近239，那我们把eplison设成0.02就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sagemath</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">N = <span class="number">763933528218428362740063144747893290714655295576768532896029874141179804730143020017430379534079773751531037961074867132893544981605022026151484151321515584652838724809597675412676810669583078026377048734720511960708515190930979</span></span><br><span class="line">M = <span class="number">36208281423355218604990190624029584747447986456188203264389519699277658026754156377638444926063784368328407938562964768329134840563331354924365667733322</span></span><br><span class="line">l = <span class="number">56911058350450672322326236658556745353275014753768458552003425206272938093282425278193278997347671093622024933189270932102361261551908054703317369295189</span></span><br><span class="line">c = <span class="number">720286366572443009268610917990845759123049408295363966717060100862857351750759651979922104897091176824666482923148635058966589592286465060161271579501861264957611980854954664798904862706450723639237791023808177615189976108231923</span></span><br><span class="line">PR.&lt;k&gt; = PolynomialRing(Zmod(N))</span><br><span class="line">f = (M + k * l) ^ <span class="number">3</span> - c</span><br><span class="line">f = f.monic()</span><br><span class="line">kk = f.small_roots(X = <span class="number">2</span> ^ <span class="number">239</span>, epsilon = <span class="number">0.02</span>)[<span class="number">0</span>]</span><br><span class="line">m = M + kk * l</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br><span class="line"><span class="comment"># DASCTF&#123;Ar3_Y0u_Su93_Abt139??&#125;</span></span><br></pre></td></tr></table></figure><h2 id="found">found</h2><p>题目描述：</p><p><code>task.py:</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">bits = <span class="number">1024</span></span><br><span class="line">l = <span class="number">138833858362699289505402947409766595473722379891580589518174731439613184249727659678966809301611194545239974736175752769503863392697421092435438747741790652435801956708356186578269272819715592752821497122516109657809748674185639254430403157877064556216401002688452227124543508128414591884297632663910714681207</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> isPrime(l)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_prime</span>(<span class="params">bits</span>):</span><br><span class="line">    <span class="keyword">return</span> randprime(<span class="number">2</span>**(bits-<span class="number">1</span>), <span class="number">2</span>**bits)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">data,y,n</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>([data[i] * <span class="built_in">pow</span>(y,i,n) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data))]) % n</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen</span>(<span class="params">x, y, z, w, n</span>):</span><br><span class="line">    data = [randint(n // <span class="number">4</span>, n) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">    leak1 = <span class="built_in">pow</span>(x + <span class="built_in">pow</span>(y, z, n), w, n)</span><br><span class="line">    leak2 = fun(data, y, n)</span><br><span class="line">    <span class="keyword">return</span> data, leak1, leak2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">l,m,n</span>):</span><br><span class="line">    mm = <span class="built_in">bin</span>(m)[<span class="number">2</span>:].zfill((m.bit_length() // <span class="number">8</span> + <span class="number">1</span>) * <span class="number">8</span>)</span><br><span class="line">    length = <span class="built_in">len</span>(mm)</span><br><span class="line">    c = []</span><br><span class="line">    s = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        a = randint(<span class="number">1</span>, n)</span><br><span class="line">        s.append(<span class="built_in">pow</span>(a, length, n))</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        c.append(<span class="built_in">pow</span>(a,<span class="built_in">int</span>(mm[j]),n) * s[j] % n)</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line">p, q = [generate_prime(bits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line">r = generate_prime(bits // <span class="number">4</span>)</span><br><span class="line">n = p ** <span class="number">2</span> * q * r</span><br><span class="line">e1 = generate_prime(<span class="number">128</span>)</span><br><span class="line">e2 = generate_prime(<span class="number">128</span>)</span><br><span class="line">phi1 = p * (p - <span class="number">1</span>) * (q - <span class="number">1</span>) * (r - <span class="number">1</span>)</span><br><span class="line">phi2 = (p - <span class="number">1</span>) * (p - <span class="number">2</span>) * (q - <span class="number">2</span>) * (r - <span class="number">2</span>)</span><br><span class="line">d1 = inverse(e1, phi1)</span><br><span class="line">d2 = inverse(e2, phi2)</span><br><span class="line"></span><br><span class="line">t = getRandomRange(n // <span class="number">4</span>, n)</span><br><span class="line">data, leak1, leak2 = gen(r, t, e1, d1, n)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = encrypt(l, m, n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">f&#x27;e1 = <span class="subst">&#123;e1&#125;</span>\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">f&#x27;ed = <span class="subst">&#123;e2 * d2&#125;</span>\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">f&#x27;data = <span class="subst">&#123;data&#125;</span>\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">f&#x27;leak1 = <span class="subst">&#123;leak1&#125;</span>\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">f&#x27;leak2 = <span class="subst">&#123;leak2&#125;</span>\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>output.txt:</code> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">214189098485907407681203562477141616514627803973812423866137712061520397412283304756125615530911730190509122275581663270324067756428063773995710185422014937638013530995658678484408224195008950739065869752467503449898424403807629035201754909341605483646512086652631108980705938767234014655512244203488129210213088484751842078315616338034946509581920246058635374657554442252420460618886159118637553788160140879059706396460523335509806462257352635091258764319929220939182156189941663585022210802535804264016891744621140144859992731921592420695928759275864955373537480452694672023754214092487216273962896544919015905264313446548396379618341043583032673900608611135254563997519445284222602183035105369017270389887769617942348731416370092842162632579589494341854993600540689280924183073089475208340685636482246115054414077320832052204722015428500812923185709772796221129375539131726373252482799298746655947376656143301849009181701495003174228813534439192414768762803822975277797520157025175837722175072241107</span></span><br><span class="line">e1 = <span class="number">228246137071395297228647198378234575667</span></span><br><span class="line">ed = <span class="number">8238783462304466047370608758999664260116370123313022088538091162770601739116628806460542503654403361322931229200817491683096695046254053538710523477982774850621979868926682997393573131262930645387042545807254462907502249936746101134745335780459335767976492133149192198880107516742633966664923533160167069625322094242414191994000927842976472080411237834215691897822371792754587587715760051582955795834883174474583440371035173351136370107484245425758954400434828144460697864191261513214008084848001467959369934964428291290009392620134215667173457413630882523557102057539902909381706460767916715499306316003286608457624713509816056636249181986636842368337873445101552453774405927824096616431732124001038586048766823358751593885500314021939046991953062562270782883182855487098328026196086288533138907969729187779739950764344200364360079479047132746676799216491472345637845220255139152063453462176656553357596450484408472263570570448409671724853674399060252094955913831086556844240273178815236110565265190938731402297513542863173575371193878977</span></span><br><span class="line">data = [<span class="number">193603701385184594048276446297744737347844155455814199029229254370819095264220091974816768902119954926302801843118379533491441884584844862023717354363708931808754214591949274005116312602470266455224300745234378334739914442825957439676825816095286879671572856543573545412426697260350097106803125967045751538098379621554276706631902573968990932601545418908413611604795306678592420345368691508562784200191380882967774951366660610843674931403729350555093525384690652277519795623276235852980416858565358154003587878300208098528966832086239417979777391494681625422699075412054104555896375767200357780876214697482279539710617118624420492042212547431773629635909699586152943845737306422831568007133429913359996553231286016257371771084485222883699365371680464830578176541643800648575916368592100327219233106270736571096051012729364523664646596211619481067284511430638593710269523511115314879651675455928382531667709288358296983594144246374318217425898507659427332121250143906371370125596969310464798423126240249</span>, <span class="number">83232380612179085215826775913833896343479487597490293209447462059425432761467292984732079051574095682196847182332185514688509237497856017321217461683610482188959719499015629286095774176457491111653557957143999953334057852475101888350978943356388186642898590728812465940108330672190227928625421072749647024169559486983638480319685288547544296403054632634251404824205877193034192901652740716146996859596783202683876256251962212218890324498229265768330077077203057547593303563888024392129443843671073192707033672163475010779991178255053309612338324024330477838635221307103942083495150839612907917081589848058122439842094169468710994236662623064896345386689141107875109648711753412281754135052688257147784328999027173384430726870349245991383171344678832691432716926162465638492315682356063658116939771331253319156940745604345000062001181547782395699365598033029965876642506023695814759189319385499447252988850495864839083230318317981608453608237316346106115145618735235568065107952583780196118328790150668</span>, <span class="number">124029091531781837962028113090891229294114028863714189021516519574129047489034463881315547790172815327938355138914693838967798779443291333910534381361187962962211286653473935493258148348900967873113580541784043054246605269411211310480597957210474116510188315932965508355182797058421774750514302992909396649836444171237873614791492630901328222719225432769644902694765224307250768110734386675470368037103624198545718645570697628428375762234137964943035358096894458271219594556780565100705603065942562805910805066341463216433921785734441069232766996055943985958999873124870066787588298481039034434476751819151203006932390088920722328035663237500463244782778252107794331963770339097484572423150244547488177952379501831335246484556589748671930152229193892849375083425231974250212167003455883859682356631577573979316259041674248398278005715972754743850288109105734019931884984180815338839040427348281561428946450368116928309897833525540729557152994911327587253232221945691931715727233240239217766670302737797</span>, <span class="number">183843790887043402011598370503205679765096296266458133303727667969475876955550067091982110668362517989161075686937475587191630156303515396551552747395896439855271453014845870528495608475291770177930209914889772055798265588308998461073614393953301177130478090234899660317573598133689999452854596939233245447620411925677910051195341774760199462465323236659615328986387497112194938688648467440994427880524194706366507582972449860152444844726883830270055690915264386828203868698790531311672618879594353865799279708001022240970903686800926148905846427187554297638489620066186565413471680781555570353090800565169455785422276246128112933238219941576176045528857395489547919586696112825074357320009241545156387826567778313197682430812363865044448037674266021191342500951073854543139099758191759460732927377434328243127385966404963426977560325865114581829641002303741276624429925421529144276258595779792107410344907550974793123288477149591078697881754824614502477971850569510391169576115446384775760103371690229</span>, <span class="number">77181491333455945581964325242677895484087511641751638314025871031862188693342644422469926996751891933595312224562658710026977124351245625357567306610633026710034325228119776532079710870381262899079582973396369685760835988946858436651701992338270031045842329350320465948557706153142357507371547722657387245712169797514661857231296527340158271569274281050502803588443964415706473620778191218694301701995011516227595325346642614102935318547327371194448611519374355163992727724271920609636416752265268455625828475046309417411350641630824310335290833466766886410952996256873847584658405040284125564777295671150020378326447929383302767250744865021112478842971725353014525757485093025086515069618536327355110519111251250847040981340091015719687780422065271394384964197564928514715001571354599930804427809172147344985789390354365168200779032355336019869878365166731683726800165060752463551011275760601115775930309162497471542196168545689657524323611832924586057251037468277241392800206625479037786453164131995</span>, <span class="number">73205035147442530516214566541083478692362666963351034174641204890993061156341833361471382741487873993415218899233020829417422641475896996781945068981179750572071381475551179347015232091326075147030318977902658370163575233636401307304118105596868322641969122224481337149842240110750279029669943793523807188344793098836560729793248976539513619414902542761745226667216171972158652220051070681390437970409917700389687006847358602838776592534429644530645228108318238605302552858660163726279648930505220310801443744840742779282348562009764207578257256917013697781985201356590904691201881074465767578202400193526454559744215480337739543855294040255939855585220261434451321167296169707368494834534854246202066172245412926996804327758827974522254706927188752034945933413541030683585047306280808869310753485476053485102398055904623441252859333696664969196044181265131793421817842193722029204872190808835304869795476166974073284194940969149929858850315553170586579171931372841255653797967227240150024403686700318</span>, <span class="number">130922536449620721874430591834893344565723848082365964975014011192154824561533294364763636501156167569463116422347814651711098794556121000604933883961221890226068691344209984798909070560094790519968140590302350163451597933415038932984088770323319866954739644053901699360711398638558276166591969032158320702311949515391689147215823312531012728672496602856530523058425713194004118786776568670195495029709727771569268007731817731032818592168140535384065850014708458707271415054346637938854605806067654806771791955707476012409629452391154116323782276692248254897822717314913613684100590993004116312109008343947373009165942573493957812296495916988918921330041670596637737127687419791813256185588201214925999361831016131784946056151576400022233684255417352789020121504134033344037825435901589346081468061266546900318139206924847037632306967700883103715011898296806759649283235666950730021534650640616764140909410457672528061603571546896273073945589966941026845451260864816435395290788038177260424513262717147</span>, <span class="number">96020307736423653849681099694795070685318392824245445231848257362698325458566036467905776769825156536584712839602346179866978464981920356841237715655104343433403974116231994567630132803569400576444622531225108131322496097985483053317699953160469549824368749143254898694578961392541769475761696371400655038962884511045507167846158292753076394297765351578172464979038847441532742344288573442736399426813737731962675826287940983072154853450868147991567341729978830384900766355148407527995483455876179619037540839473665468552119956231652786409322560587534009434185272785914134531600273010117895225594128038118745517974999777061068383501122026199178725628075723534153891577896276333860794903571069058930821070459114902328164990286376387263324567783343401640370228177304680590970952056142474240123353904350590944037465570541270903463939790277478872854503844901980335251732525427700804955963610238700131824229633507486167186619924488205009021735744358474958921593273970059532393434485837844520676695250253818</span>, <span class="number">70179739856827882014533856258768933317172692318810033540306741590616707369209255146711184424982274791424446113402776415419489619900890685813416198088324683031475573905382337205219919194813095298781099206022303955476518699780836375262573969549719034778449632890439019791098837172928410660181948068014058495402879740138532367574756729124558973222555734037856119443124996050898550301911936236705827128102625880992585253317343783711017535277283723063735482936442251712028665628766822410874182346801488486349311864283205496069261051995801486733862085378587473487850400998268984959754900117535252200774455334314910199051566060772584757900692014336924837851470210768677685669414832993403833367649813099107659677783796393020061413738567093031888744434338562745357883186640322598165729511817308735087619672370347973626978927281950583105981796610501521512515754484015947888094170824846319485769273061345748077326435513773977764989015743820427944157836645251581638303303228323898709077613114299155476100313184864</span>, <span class="number">175652862673132475686135264158791277818478759588755931484235300532096345677648348588548215587849294084744263688721294017179822791852874995430439770093077380941242256704253340009646924105298769803641006601733958786682523820789623229457197488801223995838476613815010250443077607721307486493845540520896295758708091075424003453148901604173203609500517681152737967682849411739285402305515347569269249451853704828406093324891360458117496271442944605647179886014243335325177990618809463830971905827773785311843128136687528632548334476401223625520208122482489755175042406263025133251070642315226465801303000300019213393276150665866439726799770645200082982057683225700125654562928186376718742163294884560481313657925863409955867645132050087094728187550662632446842091403257126146302052277968469833986267484560410928566363881330254151524449882128468203017476574322404834981270285221728133785929308192500229958517894515501598313596447501741967442356143089865549390247424732308735417202543341648593495568759658573</span>]</span><br><span class="line">leak1 = <span class="number">63782905210425530505481328470901215858602521952143268285063726975781165023862017491713165035148561758359744187691236004961476685244204729186881465294593870263295057863529224333542417669099353919134017169079021119796312127454942459097916913630160780015465159099215782449518378655317557377730943183040588156411578967503892807601657964531263531800827109319360771506028467872403505576255454079928964831924379679811693997670940970879328723956168008599678202445646778122559604109680197340923640067256165995420276085239676074114984790470621236336955442487022895961512902129409872825988384566511568931733560589196495514916064010319354972344856680662983166422683519534959690898549129176191205471975798892082872953657585129852579114400603842863919636216016448322273003250153436580085016262564726570590917521967949071809656413167808022466093370500545030093675230568578130810948637578959017259848848965235015851786609346028580181557524008598197188435907179498427167374290247239043475093622634785391672663701563780</span></span><br><span class="line">leak2 = <span class="number">164672413727166337721772866174120090001862616525169315969424174412610694486913567414752676879059000161543960191013302451482547492432115422013012298207836023164304846473827400728343336837942904216130312606263701738236734690810362403432673024164173553927215310314954308227523856745581991136694642282091216197557529027661009649424727525610143053300188875828126262928055570667149587498799717883989617748569211692521249022845364829999098999961242961288235871016302642964967134624027387692331993011337128668923750920957011101171731606359456882239434664044073802224898066537743795029258834874316830952385525877115357530711935126892113666494741955018064580597273121999829121331202610749992150039102390905826245578147065592557989341002712478086016329470790557522670767213438205465130632789767891535615426167314729003703510227816955522793268816231554088672856958206359854051313036334217540137808313082440476308616336781858361392907337038725576212779598635717453175121497869836504186991949457946397544924556583220</span></span><br><span class="line">c = []</span><br></pre></td></tr></table></figure></p><p>题目分析</p><p>通过 <span class="math inline">\(e_2d_2\)</span> 和 <spanclass="math inline">\(n\)</span> 我们知道： <spanclass="math display">\[\begin{align*}&amp;e_2d_2-1=k*phi_2\\&amp;e_2d_2-1=k(p - 1)(p - 2)(q - 2)(r - 2)\\&amp;e_2d_2-1=k(p^2qr - 2p^2q - 2p^2r - 3pqr + ...)\\&amp;目的是求k进而求phi2\\&amp;\frac{e_2d_2-1}{n}=k+\frac{k(- 2p^2q - 2p^2r - 3pqr + ...)}{n}\\&amp;显然k(- 2p^2q - 2p^2r - 3pqr + ...)&lt;n\\&amp;而(- 2p^2q - 2p^2r - 3pqr + ...) &lt; 0\\&amp;所以\frac{k(- 2p^2q - 2p^2r - 3pqr + ...)}{n}=-1\\&amp;\Rightarrow k = \frac{e_2d_2 - 1}{n} + 1\\&amp;\Rightarrow phi2 = \frac{e_2d_2 - 1}{k}\\&amp;so现在已知的是phi2和n，但是里面有3个未知数，所以还得求出一个东西来\\\end{align*}\]</span></p><p>我们知道有: <span class="math display">\[\begin{align*}&amp;leak_1 \equiv (r + t^{e_1})^{d_1} \pmod n \\&amp;leak_2 \equiv\sum_{i=0}^{9}data_i * t^i\pmod n\\&amp;两个式子，两个未知数，这里毫无疑问是求\ r \ 了\\&amp;看到的想法就是通过\ leak_2\ 把\ t \ 求出来，然后计算\ (leak_1^{e_1}- t^{e_1}) \ 就能得到\ r\ 了\\&amp;但是这个\ t \ 并不小，这种方式似乎求不出来\\&amp;那么能否消掉它呢\end{align*}\\\]</span> 我们将式子变一下 <span class="math display">\[\begin{align*}&amp;f(t,r) \equiv (r + t^{e_1}) - leak_1^{e_1} \pmod n\\&amp;g(t) \equiv \sum_{i=0}^{9}data_i * t^i - leak_2\pmod n\\\end{align*}\\\]</span> 对两个式子做一个结式，把 t 给消掉，但是由于 <spanclass="math inline">\(e_1\)</span> 太大，故我们需要优化一下，考虑到<span class="math inline">\(g(t) \equiv \sum_{i=0}^{9}data_i * t^i -leak_2\pmod n\)</span>，即 <span class="math inline">\(g(t) =kn\)</span>，我们知道在模 <span class="math inline">\(kn\)</span>下满足的式子，在模 <span class="math inline">\(n\)</span>下一定成立，所以在求 <span class="math inline">\(t^{e_1}\)</span>的时候再模一下多项式 <spanclass="math inline">\(g(t)\)</span>，这样得到的 <spanclass="math inline">\(f(t,r)\)</span> 的度就低于10，之后让 <spanclass="math inline">\(f(t,r)\)</span> 和 <spanclass="math inline">\(g(t)\)</span> 做结式即可得到 <spanclass="math inline">\(r\)</span></p><p>(经过测试当调到 <code>epsilon = 0.03</code> 时我们能求出 <spanclass="math inline">\(r\)</span> 来)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">exec</span>(f.read())</span><br><span class="line">    </span><br><span class="line">R.&lt;t,r&gt;=PolynomialRing(Zmod(n))   </span><br><span class="line"></span><br><span class="line">g = <span class="built_in">sum</span>([<span class="built_in">int</span>(data[i]) * t ** i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data))]) - leak2</span><br><span class="line"></span><br><span class="line">asist = t</span><br><span class="line">t_e = <span class="number">1</span></span><br><span class="line">cnt = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">bin</span>(e1)[<span class="number">2</span>:][::-<span class="number">1</span>]:</span><br><span class="line">    cnt += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(cnt)</span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        t_e = (t_e * asist) % g</span><br><span class="line">    asist = (asist * asist) % g</span><br><span class="line"></span><br><span class="line">f = r + t_e - <span class="built_in">pow</span>(leak1,e1,n)</span><br><span class="line"></span><br><span class="line">h = f.sylvester_matrix(g, t).det().univariate_polynomial().monic()</span><br><span class="line">res = h.small_roots(X = <span class="number">2</span> ** <span class="number">256</span>,epsilon = <span class="number">0.03</span>)</span><br><span class="line"><span class="keyword">if</span> res:</span><br><span class="line">    <span class="built_in">print</span>(res[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p><spanclass="math inline">\(如此r，phi_2，n均已知道，解个方程即可得到p，q\)</span><span class="math display">\[\begin{align*}&amp;p,q求出后发现pow(l,\frac{p - 1}{2},p) = pow(l,\frac{q - 1}{2},q) =-1\\&amp;所以可以知道l是p和q的二次非剩余\\&amp;又s \equiv a^{len(mm)} \mod n，其中len(mm)为偶数\\&amp;c_i = \begin{cases}    l * s^{len(mm)},j = 1\\    s^{len(mm)},j = 0\end{cases}\\&amp;\Rightarrow(小费马)\\&amp;(l * s^{len(mm)})^\frac{p-1}{2} \equiv -1 \mod p\\&amp;\ \ \ \ \ (s^{len(mm)})^\frac{p-1}{2} \equiv \ \ \ 1 \mod p\\&amp;若pow(c_i,(p-1)//2,p) = -1,则x = 1\\&amp;若pow(c_i,(p-1)//2,p) = \ \ \  1, 则x = 0\\&amp;由此得到flag\\\end{align*}\\\]</span> exp2:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">exec</span>(f.read())</span><br><span class="line">r = <span class="number">77477547161688496725906506626131775883966333151442864639104100690032824193233</span></span><br><span class="line"></span><br><span class="line">k = (ed - <span class="number">1</span>) // n + <span class="number">1</span></span><br><span class="line">phi2 = (ed - <span class="number">1</span>) // k</span><br><span class="line"></span><br><span class="line"><span class="comment"># s = Solver()</span></span><br><span class="line"><span class="comment"># p, q= Ints(&#x27;p q&#x27;)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># s.add((p - 1)  * (p - 2) * (q - 2) * (r - 2) == phi2)</span></span><br><span class="line"><span class="comment"># s.add(p ** 2 * q * r == n)</span></span><br><span class="line"><span class="comment"># if s.check() == sat:</span></span><br><span class="line"><span class="comment">#     print(s.model())</span></span><br><span class="line"></span><br><span class="line">p = <span class="number">168207689659417173628607066039457820275276732311636007089001107530860513351122555769649031031435042743185528528881857626080873859026128498997148721030271703030768717788591275936600239642357340350598106488044312274746860587888105379606096757814370419770414183228756583472285941821276338279728115488001890742673</span></span><br><span class="line">q = <span class="number">97707929018805957546753225343143490125285071269910025402668681477127527381672117514147518538470060994557862749309042238326448721045026099601424607832524228224510318920129326794773863846005792678034679056020514793964664097594210383339219122809427128901179158534676129014329576699155669500220463663254504200451</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">pow</span>(i,(p - <span class="number">1</span>) // <span class="number">2</span>,p) == <span class="number">1</span>:</span><br><span class="line">        flag += <span class="string">&#x27;0&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag += <span class="string">&#x27;1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(flag,<span class="number">2</span>)))</span><br><span class="line"><span class="comment"># DASCTF&#123;c764ba09-b2aa-12ed-ab17-9408ad39ce84&#125;</span></span><br></pre></td></tr></table></figure><p><code>Finally:</code></p><p>赛后看到<ahref="https://www.yuque.com/yuro/cialloteam/zkgzliz4cyq3uy7u?singleDoc#suSZF">别人wp</a>写的知道了令一种解法，直接求p，绕过了leak，这里贴一下：<span class="math display">\[\begin{align*}&amp;ed \equiv 1\mod (p - 1)(p - 2)(q - 2)(r - 2)\\&amp;2^{ed} \equiv 2 + 2^{k(p - 1)(p - 2)(q - 2)(r - 2)} \equiv 2 \pmodp\\&amp;p = gcd(2^{ed} - 2, n)\end{align*}\]</span></p><h2 id="ezshamir">EZshamir</h2><p>题目描述：</p><p><code>task.sage</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256, md5</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shamir</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, pbits, noise_bit, n, m</span>):</span><br><span class="line">        <span class="variable language_">self</span>.pbits = pbits</span><br><span class="line">        <span class="variable language_">self</span>.noise_bit = noise_bit</span><br><span class="line">        <span class="variable language_">self</span>.n = n</span><br><span class="line">        <span class="variable language_">self</span>.m = m</span><br><span class="line">        <span class="variable language_">self</span>.p = getPrime(pbits)</span><br><span class="line">        P.&lt;x&gt; = PolynomialRing(Zmod(<span class="variable language_">self</span>.p))</span><br><span class="line">        <span class="variable language_">self</span>.poly = P([bytes_to_long(sha256(os.urandom(<span class="number">32</span>)).digest()) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>.n)])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sample</span>(<span class="params">self</span>):</span><br><span class="line">        t = getrandbits(<span class="variable language_">self</span>.pbits)</span><br><span class="line">        y = <span class="built_in">int</span>(<span class="variable language_">self</span>.poly(t))</span><br><span class="line">        noise = getrandbits(noise_bit)</span><br><span class="line">        <span class="keyword">return</span> (t, y | noise)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_msg</span>(<span class="params">self</span>):</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>.m):</span><br><span class="line">            res.append(<span class="variable language_">self</span>.sample())</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">pbits = <span class="number">400</span></span><br><span class="line">noise_bit = <span class="number">32</span></span><br><span class="line">n = <span class="number">100</span></span><br><span class="line">m = <span class="number">75</span></span><br><span class="line"></span><br><span class="line">shamir = Shamir(pbits, noise_bit, n, m)</span><br><span class="line">coefficient = shamir.poly()</span><br><span class="line">key = <span class="string">&quot;&quot;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>(coefficient)[<span class="number">1</span>:]])</span><br><span class="line">key = md5(key.encode()).digest()</span><br><span class="line">aes = AES.new(key = key, mode = AES.MODE_ECB)</span><br><span class="line">ct = aes.encrypt(pad(flag, <span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="built_in">str</span>(shamir.p)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="built_in">str</span>(shamir.get_msg())+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="built_in">str</span>(bytes_to_long(ct))+<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>data.txt</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="number">1914861180127910915217161496032452354459288330404267938814385633318816795789745430689392291853522228462459760259540145551</span></span><br><span class="line">a = [(<span class="number">871685718803663381427930478762339134295053004512609923589551466783266783810259304828550374243064535763376291757646963959</span>, <span class="number">202160546047966750331912360731430418240633973593625005229082586127891061162361922677243409978233971196981357156050665207</span>), (<span class="number">880630661134451484589856936400581718913135314681369937077374828269467594291354487238721693384105758714624990294669591318</span>, <span class="number">1095968002726348118037606681187141462053336336722142181092378890939072246257043346524710197351420437134900753767241347071</span>), (<span class="number">2201481802919131040050333908088433208558917203945919199978631826943299343536825970006258238556122903076523292840756434743</span>, <span class="number">692254736946777374134144410762495005358360246411034340533738679554417430991182506230475828234351704793913692448647675007</span>), (<span class="number">1378304382181829689586748896745391077371970833336011385982116414924775680216930605930619270704824436444608781376558454118</span>, <span class="number">1349836972600983636760377380443471914884359770040030987799061599827409370783772298884084190105572886840534075250106753145</span>), (<span class="number">1353153805805015283526548792279508930383121644895000056925297797888893262990508466655386951026647093911241738634749231794</span>, <span class="number">708640659789589986759360580045421230914410242138084549192350870784628479597574645622638880069506009868145944996982225278</span>), (<span class="number">1060943952101159814075555130286870049673510249558382992676797709837360932812847335287824269141102612270742087176360534041</span>, <span class="number">1039246257482395034113137526078027968667726416005827851568387262127498749146041230779139405404483176650987996444622585854</span>), (<span class="number">2424118466972165402210232064008571072995878364648534891594437945505312271409808703384482184386252162745547514610618028336</span>, <span class="number">635156696412302837761915637951567688860519995373738062624916498633145442364997312202584276482319362616731324143180341246</span>), (<span class="number">1772241931859851196567261257895529032033057998867860001437142889635454121520207911859978309001300625929738493595845855555</span>, <span class="number">500604911497932506773931452024208499570885483407547558939058205116845746585850868300414311672651970998734159786902749117</span>), (<span class="number">187044491746709666918227023301039735707457548611767420757592410489694090421689472337383722846260140189038198219461031942</span>, <span class="number">227360883946968296249705407270310276359769497016888615738491818601296225309783611129587894811655567646792586796017233916</span>), (<span class="number">698522560244433302990615272949028179635002687309158390959480083880213377867539289895143372657572453749378003459093150970</span>, <span class="number">1438446488346299625609140434323525340139617346663444436909013102079035123226801253230191914228775608263694160574643826415</span>), (<span class="number">1314293541818269470008262253418684239221368418527916534392752287558240541875482130114787897305513520252998018265836595136</span>, <span class="number">933106402921508526957532367623168847119197804766985507707958985877339350054085035066950570021869141193740290685053960123</span>), (<span class="number">1501745172784237049923522578654390251325669575513607134910901665808936517556360097769749957840258117848678845196676974438</span>, <span class="number">1516777488301366348170721193695469080262430948767494893352311177358850775942249045078694319757619073073088994542922628861</span>), (<span class="number">1718313250889012550002734353486104431289067168806022987862850465345813017177898627414672453244745977044381286178413506161</span>, <span class="number">506057417158279773145112367533063233326190899630436097648290976200406049591277922238049560242268646574334872382933403615</span>), (<span class="number">2574114678492270903282456732270950593394194358462333441160509514501148947640703147403802718744307473847235179125898798831</span>, <span class="number">1503310774908591444184865449721473627976722270933784408676574059139777045024294387334806494605277115228299871854598791166</span>), (<span class="number">1770243408559044970812149306040976785192946281881654467315187543403793080522851914844996680381886937167658398949087446193</span>, <span class="number">1099237075950355774454839935750271630613513947414691912497783029355832037700530351594087156234712938075324990262460261245</span>), (<span class="number">2166086041023587382902739106621961372440200378327129977520031042444044378994128764308981213008281610274832831816068579582</span>, <span class="number">662709908868241192557028160616176772511764390044399310771390622778705044736473497185759270701465132475627229112002146287</span>), (<span class="number">2170463762878343673691652149382892550249493539913487563393294153717628928418073705621516968910372026548584895576642432967</span>, <span class="number">1413676394542378061807394780263485269329077458637078447074464881203630348193024572124672013567573482444837133106653543455</span>), (<span class="number">1129266289804637843248865446624604876222278055268049666382746600434990532837254822384883357227875808573227656504651891817</span>, <span class="number">1535832745242864345604750984721590856572422259228943440577864210008688452305222147646810543026576688303372824677842288383</span>), (<span class="number">2306555154959167883502684934268021903550464872811594873384525370627065323932167910172723635326929186844444801386870524867</span>, <span class="number">574207014379682600904001842474004352741607105704886122985304177072984415266547565043126591318153332317051149516485422972</span>), (<span class="number">1724617341290962542300349861015192124473593787607849187241871123866653776294891983393875816012660538610025134685453770248</span>, <span class="number">1037506311823536647118763707562050051146414393535410677631530307480219373475166677371198285257502421566885284344997084663</span>), (<span class="number">202616766252415923229841624622749382197002736241072130496684863225861466295470440453433729087043063339640795866357221636</span>, <span class="number">1486069111757435527648291199412538135459418727823506381342991481853059317128849411787275828115963269643450637901851750359</span>), (<span class="number">782072578333357184532047183424922628763983310554137973249125608272717772586145583974361061586170067251618252434433193104</span>, <span class="number">283757911494107775111019950316083145592345149507512192994272372101655062364071745340414019692327679359235776555825852415</span>), (<span class="number">2197595167942118116042253773798345585826387963460510458606977372991191820486797272252095468231729659915814456157670560486</span>, <span class="number">955293934596965502510872570415413020132164928134045802395033751487848017887015144832326371969637236306696054523237785589</span>), (<span class="number">1098157283702819563820742199423754909028104781243946454418867995181539307551856844793857199640783377355282394025101300655</span>, <span class="number">635111390180648841537968959615311456853925067622053148053038395898914597955860998732345527697104011201693008366561317143</span>), (<span class="number">1539369283131984995745859995105101736066475537281347948822432206665809508754710210661232887491808392388057664234877214907</span>, <span class="number">1873336536033306125287332317304933459481487853852475402907316652085126765046749618993624553154025815108827029610442783458</span>), (<span class="number">2105684701096534411811602939870350859970761398331640507345513836997797916059406457337165075287082983610738904681969289045</span>, <span class="number">1070056100602518593988818068846549889380286647944194826819905043161724050669042969316031968306712388470995120352413349630</span>), (<span class="number">142489011778634823488933340993644406251365634143001554672065147110660487229716505211502368066478460823953952289740995290</span>, <span class="number">1600505031347134429197259601839106217157515935077383802359036680943190353630112460191899585397343290624969344500745894703</span>), (<span class="number">554711031900068277207319195022074787064807351540056727585559478009641245829914129658355024028140622126230477378977389537</span>, <span class="number">65339521639683012798947456976243744037602872322070608133060186211835711806848370610017017866030009537787109068192454654</span>), (<span class="number">532900849979395683891747931991929993723658239680866376615001124559008204600725833769158798743570050012188528983307982345</span>, <span class="number">334144016771241488303216672075523455061388505657739817526966708251875900758813513342313135616513439456734341083743369135</span>), (<span class="number">869702918099306179247127839502723535611690279734139047798433105147760657329410795136726045654330604238870805984709621246</span>, <span class="number">1169351283105013313749641940783038490083938869389146122787264490618765187367135121126934960933658038044552677868393266925</span>), (<span class="number">786239400981081690761967926939692614214352370457999126682279606306346828244856149092806342991454830115357428173569519111</span>, <span class="number">341229317116770102168944480795910149567176593419165900124153031167345358788428115442807890687039322892597408592425778007</span>), (<span class="number">2064213065995911617919315029041029121543167107287437882288959061187785048503282055451690399898250479932109432366548223997</span>, <span class="number">865205430622864313641681018820800198136329954993789609121686669624009340125228193996720833574248608603224773986947432415</span>), (<span class="number">1996571933560681341081972550429260163713030332385776633835663546385508374790580854691775408939051083454291050879529580125</span>, <span class="number">559622002964744852554436566542525646157533309978763685146044798881793139644019170010343656282702809565334484141114392471</span>), (<span class="number">1665201866056279622733275067329071022333699015026928761307123522986743452132023670960400981020146860918570153444345681972</span>, <span class="number">1206659985279999461070238583934930315667638779868565409888110141662803190569415230894181412146290317311945493517622418483</span>), (<span class="number">1515824630378748853880547205191400487565887686063520538971380532161078510669610334484477786016989319170924543667026641318</span>, <span class="number">154768510600010010017326698396207970330238438685198973674456030784650112353692986269413531937661879315225602124927708924</span>), (<span class="number">2400640362993011976891348699605911902016988451462173893625476704482508356176787307014920885489349704332546642981698540069</span>, <span class="number">1121421906118323024216284095711804126345276955926784522370067713782427318851230923383318334457757167182928811853910539965</span>), (<span class="number">914679394823164487648957492231711749917619119979512000391828434330805091270968219541264417579001916453063785209093025303</span>, <span class="number">374627069056072738750323688310128739794138886219071824099120374559973078400286337012659440934169856150484268780102828020</span>), (<span class="number">1021972013999414078223981430633642397558044349935082594710388870307835007718638824792649139809042384573145837264785258692</span>, <span class="number">102093917357525962153933641992946656421204665316272197308632790969421027148825374536157392412871816080580115446708002591</span>), (<span class="number">1090613002154339666672492884775405717313689831457406446112184992081112549743653583926163772335048052650217605191460964064</span>, <span class="number">1013686859153230698540678410867250429548404782986370285534810877495709441098450523218264937019132584108142305563714746606</span>), (<span class="number">2161046501022327990933396497482765893753709560942237251106031463450880235879988355009303131242535391464106086265266338474</span>, <span class="number">1842825126623549349236000977359585068860414649531034170142594564984327572182360450517454690000097975914639809219290654045</span>), (<span class="number">734600260267770729123110997283110745757092649194443870464263775523592639286156519663230810008655565992062564338915033184</span>, <span class="number">1439472390868656814802271856900227714476824912359664972147156053839098765837149646453806800388007932953080250670815772651</span>), (<span class="number">881335900275714936417588963897633003585264162416587081468620588101288614371107988322661634495058217226298025521720126634</span>, <span class="number">1438060177355585280770231938473797663421441580729795412881287946986577092068342750409767988724102261013424113586148457982</span>), (<span class="number">876173729780067336779925806297809473013555554668200124165269741312909223647316933287442159368855433236050789576297672813</span>, <span class="number">584722637090302053439384198012199760324880317678105782762720083676914628942486088928409942979389876557255132127516159991</span>), (<span class="number">1733558429089397683359597663185076627234549140640918522337597781379981378009350733554208954192805660163725305958818509205</span>, <span class="number">1010477387678444338602582972843701290504497269295430761287923107029938822433731115008623372768060580369747062615441406973</span>), (<span class="number">1758000758086776729345325124199287880198692107697670885448853730203070351345566212118269510767350031899984650531292511829</span>, <span class="number">1484408939224604508966101404659297622265311898991708197399154932571955375325130297122648740841893311564144118335134464767</span>), (<span class="number">1804131890436486866363129670875272535127829613109307224638927349502815652920038318044827248066297349084047126682198723537</span>, <span class="number">205851561043462971495790984180238782403371191306463313748537952075031757233102533087892093246459879467418213080624418525</span>), (<span class="number">115055233675952369353652759916228030654313474433562820828539341357745365094094469880187786426435712648771454584499932530</span>, <span class="number">1176080864489594177205517592453183512444290818765306305520846987245653463202230068116379056777589684194022156652500590286</span>), (<span class="number">2328185963017050382404641363914321749130815400658884925780323745763587492366183441185791654864416499947607965414839983680</span>, <span class="number">1886972372164945427290729032551681924723044624295253696412030824048931146570915452349880650169939511030432165431905079162</span>), (<span class="number">1187461847839408713851221476312312384869325749843380494840008651043567024911068726332857155522639869883501560564590472502</span>, <span class="number">14245981570273560431111454126826341091354415427387740559245555665941487543601004914128539171516718107049427670791071455</span>), (<span class="number">1275402030469087379247637832029139314437943507754693234009807154397029994354617242802931983091961356790463942774885431413</span>, <span class="number">1244618585414033483912499539268357193993901084573974055024618656871349876744646123907837743332137138284077968028988239205</span>), (<span class="number">434412507816189969843251866894800201497317336949194643079967243932448367734854234524383921690504689272627248814185361829</span>, <span class="number">1193224411748734492892063266412070819051994764468021617840046995194588804893634149301845035319723286201666783735434959871</span>), (<span class="number">967206800413690215868425566102618623559678834432686964828977512828919721907280699739833113197470139412151190023683313494</span>, <span class="number">1808530961381834386234136376719035780314110457320233165055990056489953593025409242256807470925700807422319096558572795309</span>), (<span class="number">313624779412398332754376720890766035026328871037358868168298423270666735999144035960122672900278781994670311217953770375</span>, <span class="number">1686899500506262775384473022726677756466624697749756704659992441285341042856582261569357914257097304916151170085370461887</span>), (<span class="number">2503049409019801269651799221722260539204050296212337202096008034125758666888245353212657377647881087341258220743220151950</span>, <span class="number">1805670425703721038437117454438319230600703158318099419770216013430708468787297957979021344350598998116788430512286857710</span>), (<span class="number">542793615526234040152647477936504636873290026979804505200706031754909176961382452267207291751054204331474258583862955704</span>, <span class="number">137413216840404664240606423528330611923289618863367088636432169005845572010429296034368451334357274658088690084213739519</span>), (<span class="number">1278727765228747216000039330509641392475448645848420065175572576050796418025108532539983143839105111868933395201633094022</span>, <span class="number">23388499359309984016274969787898858204391606769507546898645785064534114465222342746534462082168690576567031618802237437</span>), (<span class="number">1012848580192164395816758294581574397534987673377799482227399907475636722043236850766024023620412517564680586256857352143</span>, <span class="number">1905214326869438439368196073362306288481014496204443072620153943726399155969870686475260450389360494546627630953811148739</span>), (<span class="number">14681804970662677021409260234892378252555735233958673970664432299644093318314837872915339633110893420712659256185701001</span>, <span class="number">1011761630527797621590321605066946971053085037922024159289431337005985850853467103097812975363878048453898707806902513147</span>), (<span class="number">1285297724752785338545033366325253262303128927017049271006754406539647664563391436762226286574374768602309413720192759993</span>, <span class="number">1493631305230939817393915729396076315723258260416123252804505906893714637325280535095299471289740565654113670071232495263</span>), (<span class="number">1936455326607738910358536004445045468685935298243245355139607465446389473389575731412354107347767379820812067955096505581</span>, <span class="number">17221509529814003689149745147239645298120184452011530064684368807629510922529681925724732647573630702864807669020485630</span>), (<span class="number">1712173121206746224826777847167590088908487771935061508185448418705799456315866273530139739504675597716276421618856320329</span>, <span class="number">863258960233895711001625204805338525869459949675833484269384656157104193362371966225031203968537041681324265578127949567</span>), (<span class="number">122947819386929089053369455928546401519366926955589935482151285368760894784571110782585692673158533373827447719944343791</span>, <span class="number">1029102739229804972707735760530574223266205866939373652705629746591419564062928935797957680207632040596245681227704817914</span>), (<span class="number">2385767142510533504647214446664898369383090132453476416454822794037991187237960157132343084153289103535309857420295111775</span>, <span class="number">1761624877069474386824225334992881109136596455709107320013742630575693526591737171363464568721656277644139593399384668014</span>), (<span class="number">812771942753829583712722765469520203663717266127958627830326203252222513862479475416772893289895236549766564327139922612</span>, <span class="number">1400551965978757484763340299740157171921224208542574495162921941233365483529203665206398541892811136907423472715818784767</span>), (<span class="number">1730447421466464570286474725493766890793606044225883792125770759375672642470742177732074062181325776806752255986611978352</span>, <span class="number">1227172422842784980554449107675660327741994737748190415035709694965213848256121533465275911556767542681543052337917439991</span>), (<span class="number">884876570094879628298320898305798783174822422253214800767481822053599408285668812621687108791956015225332329856833897849</span>, <span class="number">753204920370187659065626153785437381083012604855618525406022085513242388007754850086113679887120336586260993544726445815</span>), (<span class="number">2423878693124084232298267862648738136330397292982760413012437397441533882471872339001090243864079240084356627531832647422</span>, <span class="number">77986001656302970387684242942282141405916785932070787943262406584312194694807333266164831908062494860407574874622803959</span>), (<span class="number">1290185371498453630061135665764650237444736789468400436115999443209964260044045414036036267228562648112405016415084034369</span>, <span class="number">68976337771940690010768399948574523361633543589446521911372413501313976435844421496476544211566756895340409483041171429</span>), (<span class="number">534185007935476498632058534030834014275044346188926848916387521022740118957225895686427252642167800163347935460364558055</span>, <span class="number">731879744398464762194277983635893240035937844142280555568092822946046633080006561051406094554262898470573348173297417945</span>), (<span class="number">2009543648096147223331131572743756103868310430657031922289948135024763757031731292638042205835167380178315151642456024876</span>, <span class="number">864568612425196666545678285566636785636433247142630432401391420609479878443671268150141447157212173236963221732165810175</span>), (<span class="number">1757088643325711453646774590651240485497713141719261877086100356614624931730830270746024611221269656481354818801893802862</span>, <span class="number">974732470392774737526017597270025996122553373618728789664042196211840392818797860303355085148223560919202565975591828989</span>), (<span class="number">288236986926014229269042124754978817491981631142567735873084199780621570926784314358694003281689620128867232148908447783</span>, <span class="number">1677180488607905300411659606081989540342864981198203708964066014660249657102993313228752304204059137461689367948628457454</span>), (<span class="number">2357100534536251965755486926312170142467175578829851375102247846264889085384519286073305902768874043332485938824401972401</span>, <span class="number">701015346799246873651989606339191939588270778423404768025441929439466616345395882534334734331126078737835606277756551038</span>), (<span class="number">361601359553041584651624082197420503156194921051661310152767809536879950298413026398079782027847432778044471125267794148</span>, <span class="number">338870184820594722235914590766168929044789583242319904735556030852263040707796808350885054449714833051229949699390437343</span>), (<span class="number">437493113470125074131702090577490292225129373521518638964839429915294209870286662477332241046314129156199317300178856910</span>, <span class="number">304951333972637627160342487320016313244618388459742922018615396895218523409067458512473044675590109759792913998170528746</span>)]</span><br><span class="line">ct = <span class="number">14058554635665083618818231958810639805770645952778992611953881143316377164307777281092527452513347998950720853358361</span></span><br></pre></td></tr></table></figure><p>题目分析：</p><p>知道如下关系式：</p><p><span class="math display">\[\begin{align*}x_1 + y_1 \equiv m_{99} * t_1^{99} + m_{98} * t_1^{98} + ... + m_0 \pmodp\\x_2 + y_2 \equiv m_{99} * t_2^{99} + m_{98} * t_2^{98} + ... + m_0 \pmodp\\...\\x_{75} + y_{75} \equiv m_{99} * t_{75}^{99} + m_{98} * t_{75}^{98} + ...+ m_0 \pmod p\\\end{align*}\]</span></p><p>构造如下格：</p><p><span class="math display">\[M = \begin{pmatrix}    1&amp;&amp;&amp;&amp;&amp;t_{1}^0&amp;t_{2}^0&amp;\cdots&amp;t_{75}^0\\    &amp;1&amp;&amp;&amp;&amp;t_{1}^1&amp;t_{2}^1&amp;\cdots&amp;t_{75}^1\\    &amp;&amp;\ddots&amp;&amp;&amp;&amp;&amp;\ddots\\    &amp;&amp;&amp;1&amp;&amp;_{1}^{99}&amp;t_{2}^{99}&amp;\cdots&amp;t_{75}^{99}\\    &amp;&amp;&amp;&amp;2^{256}&amp;-y_1&amp;-y_{2}&amp;\cdots&amp;-y_{75}\\    &amp;&amp;&amp;&amp;&amp;p&amp;&amp;&amp;&amp;\\    &amp;&amp;&amp;&amp;&amp;&amp;p&amp;&amp;&amp;\\    &amp;&amp;&amp;&amp;&amp;&amp;&amp;\ddots&amp;&amp;\\    &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;p\\\end{pmatrix}\]</span></p><p>最后75列乘上A = <spanclass="math inline">\(2^{256}//2^{32}\)</span>来平衡目标向量中的元素</p><p>得到下面对应的目标向量：</p><p><span class="math display">\[(m_0,m_1,...,m_{99},1,k_1,k_2,...,k_{75}) * M =(m_0,m_1,...,m_{99},2^{256},Ax_1,Ax_2,...,Ax_{75})\]</span></p><p><spanclass="math inline">\(m_i\)</span>即我们要得到的一系列系数项</p><p>最后将它们拼接一下即可得到最后的结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">exec</span>(f.read())<span class="comment"># p, a, ct</span></span><br><span class="line"></span><br><span class="line">T = [i[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> a]</span><br><span class="line">Y = [i[<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> a]</span><br><span class="line"></span><br><span class="line">M = matrix(ZZ,<span class="number">100</span> + <span class="number">75</span> + <span class="number">1</span>, <span class="number">100</span> + <span class="number">75</span> + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">75</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        M[j, i + <span class="number">101</span>] = <span class="built_in">pow</span>(T[i], j, p)</span><br><span class="line">    M[<span class="number">100</span>, i + <span class="number">101</span>] = Y[i]</span><br><span class="line">    M[<span class="number">100</span> + <span class="number">1</span> + i, i + <span class="number">101</span>] = p</span><br><span class="line"></span><br><span class="line">M *= <span class="number">2</span> ** (<span class="number">256</span> - <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    M[i, i] = <span class="number">1</span></span><br><span class="line">M[<span class="number">100</span>, <span class="number">100</span>] = <span class="number">2</span> ** <span class="number">256</span></span><br><span class="line"></span><br><span class="line">M = M.LLL()</span><br><span class="line"><span class="built_in">print</span>(M)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> M.<span class="built_in">list</span>():</span><br><span class="line">    <span class="keyword">if</span> i[<span class="number">100</span>, <span class="number">100</span>] == <span class="number">2</span> ** <span class="number">256</span>:</span><br><span class="line">        res = i[<span class="number">1</span>:<span class="number">100</span>]</span><br><span class="line">        key = <span class="string">&quot;&quot;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> res])</span><br><span class="line">        key = md5(key.encode()).digest()</span><br><span class="line">        aes = AES.new(key = key, mode = AES.MODE_ECB)</span><br><span class="line">        <span class="built_in">print</span>(aes.decrypt(long_to_bytes(<span class="built_in">int</span>(ct))))     </span><br></pre></td></tr></table></figure><h2 id="das_dsa">DAS_DSA</h2><p>题目描述：</p><p><code>DDAASSSAA.py</code> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">b2l=<span class="keyword">lambda</span> x:bytes_to_long(x)</span><br><span class="line">l2b=<span class="keyword">lambda</span> x:long_to_bytes(x)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor</span>(<span class="params">A,B</span>):</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">bytes</span>([a ^ b <span class="keyword">for</span> a, b <span class="keyword">in</span> <span class="built_in">zip</span>(A, B)])</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleDSASigner</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, p, q, g, x,KEY</span>):</span><br><span class="line">        <span class="variable language_">self</span>.p = p</span><br><span class="line">        <span class="variable language_">self</span>.q = q</span><br><span class="line">        <span class="variable language_">self</span>.g = g</span><br><span class="line">        <span class="variable language_">self</span>.x = x</span><br><span class="line">        <span class="variable language_">self</span>.y = <span class="built_in">pow</span>(<span class="variable language_">self</span>.g, <span class="variable language_">self</span>.x, <span class="variable language_">self</span>.p)</span><br><span class="line">        <span class="variable language_">self</span>.KEY=KEY</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">self, message</span>):</span><br><span class="line">        h = <span class="built_in">int</span>(hashlib.sha256(message).hexdigest(), <span class="number">16</span>)</span><br><span class="line">        k = b2l(xor(message,<span class="variable language_">self</span>.KEY))</span><br><span class="line">        r = <span class="built_in">pow</span>(<span class="variable language_">self</span>.g, k, <span class="variable language_">self</span>.p) % <span class="variable language_">self</span>.q</span><br><span class="line">        s = (inverse(k, <span class="variable language_">self</span>.q) * (h + <span class="variable language_">self</span>.x * r)) % <span class="variable language_">self</span>.q</span><br><span class="line">        <span class="keyword">if</span> r != <span class="number">0</span> <span class="keyword">and</span> s != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> (r, s)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">self, message, r, s</span>):</span><br><span class="line">        h = <span class="built_in">int</span>(hashlib.sha256(message).hexdigest(), <span class="number">16</span>)</span><br><span class="line">        w = inverse(s, <span class="variable language_">self</span>.q)</span><br><span class="line">        u1 = (h * w) % <span class="variable language_">self</span>.q</span><br><span class="line">        u2 = (r * w) % <span class="variable language_">self</span>.q</span><br><span class="line">        v = ((<span class="built_in">pow</span>(<span class="variable language_">self</span>.g, u1, <span class="variable language_">self</span>.p) * <span class="built_in">pow</span>(<span class="variable language_">self</span>.y, u2, <span class="variable language_">self</span>.p)) % <span class="variable language_">self</span>.p) % <span class="variable language_">self</span>.q</span><br><span class="line">        <span class="keyword">return</span> v == r</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">give_gift</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="variable language_">self</span>.p,<span class="variable language_">self</span>.q,<span class="variable language_">self</span>.g,<span class="variable language_">self</span>.y)</span><br></pre></td></tr></table></figure></p><p><code>task.py</code> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> DDAASSSAA <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> FLAG</span><br><span class="line">ALPHABET = <span class="string">&quot;DAS&quot;</span></span><br><span class="line">KEY_LENGTH = <span class="number">32</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_random_string</span>(<span class="params">length, chars</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(random.choice(chars) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_message</span>(<span class="params">num_messages</span>):</span><br><span class="line">    <span class="keyword">return</span> [generate_random_string(random.randint(<span class="number">20</span>, <span class="number">32</span>), ALPHABET) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(num_messages)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_key</span>():</span><br><span class="line">    <span class="keyword">return</span> generate_random_string(KEY_LENGTH, ALPHABET).encode()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_strong_prime</span>(<span class="params">kbits</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        q = getPrime(kbits)</span><br><span class="line">        p = q * <span class="number">2</span> + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(p):</span><br><span class="line">            <span class="keyword">return</span> p, q</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_to_file</span>(<span class="params">filename, data, rwx=<span class="string">&quot;w&quot;</span></span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, rwx) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> data:</span><br><span class="line">            file.write(<span class="string">f&quot;<span class="subst">&#123;item&#125;</span>\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    num_messages = <span class="number">2024</span> // <span class="number">65</span></span><br><span class="line">    messages = get_message(num_messages)</span><br><span class="line">    p, q = get_strong_prime(<span class="number">256</span>)</span><br><span class="line">    x = random.randrange(q)</span><br><span class="line">    key = get_key()</span><br><span class="line"></span><br><span class="line">    signer = SimpleDSASigner(p, q, <span class="number">2</span>, x, key)</span><br><span class="line">    write_to_file(<span class="string">&quot;GIFT.txt&quot;</span>, messages)</span><br><span class="line">    signatures = [signer.sign(pad(msg.encode(), <span class="number">32</span>)) <span class="keyword">for</span> msg <span class="keyword">in</span> messages]</span><br><span class="line">    write_to_file(<span class="string">&quot;enc.txt&quot;</span>, <span class="built_in">map</span>(<span class="built_in">str</span>, signatures))</span><br><span class="line">    write_to_file(<span class="string">&quot;enc.txt&quot;</span>, [<span class="built_in">str</span>(signer.give_gift())],<span class="string">&quot;a&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> FLAG==<span class="string">b&quot;DASCTF&#123;&quot;</span>+key+<span class="string">b&quot;&#125;&quot;</span></span><br></pre></td></tr></table></figure> <code>GIFT.txt</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">SDSSDASSAAASSDADSASADASSSSADDS</span><br><span class="line">SADADDAASSAASDSAAAAADS</span><br><span class="line">SSASDDDSSSSDDSDAAAAAASAASDSA</span><br><span class="line">SASSDSDSSSDSSDSDASADDA</span><br><span class="line">SDDAAASASADDAADDSSSSDASAASADSA</span><br><span class="line">AASADASADDSDDASADSAS</span><br><span class="line">DASDDDDAASADDASADAAAAAADS</span><br><span class="line">DSAAAASASDDDDDDSSASDADSASDDA</span><br><span class="line">ADSSSSAADDSDDDADAADD</span><br><span class="line">ASDDSADAASSASSDSDDSSD</span><br><span class="line">SASSDDAASDDSADSDSSDAASSAD</span><br><span class="line">DADSDAASAADDAAASASSSA</span><br><span class="line">DADDADSSDADAADSSADDADDDSSDAS</span><br><span class="line">AAASDSSDSAASDADDSADSDA</span><br><span class="line">ASDASSDSDDADADSDSDDDDADSSAADAS</span><br><span class="line">SDSASDADDASDASSDSAAASSASSDADA</span><br><span class="line">AADDSSDSDADSASDDSASSDDD</span><br><span class="line">SAADASAADAASDDDSASSDAASAAAS</span><br><span class="line">SSDDADSAADSDSSADSADSAASASDSAS</span><br><span class="line">DSDDAAASDDDSAASSDDDAASADSS</span><br><span class="line">SASSAAAAAAADSDASSDASSDAS</span><br><span class="line">DDDASAASDAADSSSASAAAADSDD</span><br><span class="line">SASADSSSAADDASADDDADD</span><br><span class="line">ASDDDDSDDSSSAASASDSSDDASA</span><br><span class="line">DSAASDSDAADAAAAASADSDDDDAAA</span><br><span class="line">ADSDADDDASASDSDADSADADDSASSSD</span><br><span class="line">ADADDASSDSDASADDSADSD</span><br><span class="line">SASAASDSDDASADASSSDSAAA</span><br><span class="line">SASDDADSSDASDDSSDSDA</span><br><span class="line">ADAASDSSDSDASSASADDSDDASAS</span><br><span class="line">AADADDSAADDDSASADASSDAADADAA</span><br></pre></td></tr></table></figure> <code>enc.txt</code> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">59254487398967388114905667045028363843329923626238494813205814542210325221866</span>, <span class="number">38134152657262330507433713437784426184950965354807113354631630191330303144120</span>)</span><br><span class="line">(<span class="number">7272091585909282735283006759301331954064261183899338079418296410637263888770</span>, <span class="number">25499964678151126566605578540840513489434638253159604087981425065951344757164</span>)</span><br><span class="line">(<span class="number">6899645492048427857621143178962093646174799398991863666101058693217698732368</span>, <span class="number">9791582686238213337967141368906212036310014918808878260483336268832064128819</span>)</span><br><span class="line">(<span class="number">25004120896291255053237639070744331951278481119827357255754648579794346195560</span>, <span class="number">141512006531073436448016797005260994098008785866923890662245540709534244927</span>)</span><br><span class="line">(<span class="number">2970680424634969125510981613739745658897845410407912521400879068659540408508</span>, <span class="number">21793011307831199247000930716490000926029175766326909085969585420590222327264</span>)</span><br><span class="line">(<span class="number">54566000630497640561512172245143554745650114820675965968691149808463168361994</span>, <span class="number">14349862994826483344159692458388566295460798903541941504424537018216650283613</span>)</span><br><span class="line">(<span class="number">75159685495692974866291952764676724718763580667689472941977359299782008334398</span>, <span class="number">70458140884809949567915541063312538538372757595177423386408938073672211639375</span>)</span><br><span class="line">(<span class="number">20041025052466338500977838626769109456575569706600589389016534358968746705758</span>, <span class="number">65530083011107720400920780939345704754954869671333734672594688826098321351660</span>)</span><br><span class="line">(<span class="number">70127192435034402135747706941502224672808592757766109942714487474501491910214</span>, <span class="number">57063474646503909216126596725677068514339517777473453937098665282959018241139</span>)</span><br><span class="line">(<span class="number">9691674719110233709152049443866537766465800386755314400120771762265195237696</span>, <span class="number">62093763551744197212031574855244002702924782008725363963219173846480120194830</span>)</span><br><span class="line">(<span class="number">71705536377844454384479609516094364197930343317149881589774662842233960882414</span>, <span class="number">77374603032347186343803094100249733360600621594214414598796066240713702791608</span>)</span><br><span class="line">(<span class="number">52879693221782582945807231749976747516107564896599455986464226581743117039645</span>, <span class="number">1344584960351311598238142429846629993914377848692708811135221930719773821079</span>)</span><br><span class="line">(<span class="number">77382790022991362370508965243223326049308313776687214599186184000848696471646</span>, <span class="number">43641233828500431963081402892838426285406919342406723474664571883294369141394</span>)</span><br><span class="line">(<span class="number">56346141869522955969887972614456267251604757060687228073793419107933969328162</span>, <span class="number">76285674574149814839616688665569434237657824816977670694242559140508233840268</span>)</span><br><span class="line">(<span class="number">13673786393914569132256858604647869957632869873889606981549833789272316263013</span>, <span class="number">55327829510120473782794486945583818434703312785066895788282945944551470490709</span>)</span><br><span class="line">(<span class="number">64767740468987944636292946852714160626094908713011502873333251460983428727987</span>, <span class="number">13259490361346409766866273875042192439139048727072955549892484859673179719539</span>)</span><br><span class="line">(<span class="number">3957421961183318932163297455146838208380750250268324980567615749312524020603</span>, <span class="number">26882140137481455957383933013829466811327529673163422516945649296787438630196</span>)</span><br><span class="line">(<span class="number">26427922029900012253901950242265848521558605010629901777129266992870754082725</span>, <span class="number">69951840114040217998552588969628162605092507207522992695398095063314527794456</span>)</span><br><span class="line">(<span class="number">41377529326816743042387061355650636824586430044255853849728865473372840135697</span>, <span class="number">11219359019456290145545276763003725218855047474525360923001515509608652449000</span>)</span><br><span class="line">(<span class="number">25716607607446503241765016815241812755718791371526314953930748513731536667770</span>, <span class="number">28453782213087434330094261632474010077787574243224303728751260500450723227337</span>)</span><br><span class="line">(<span class="number">19800391798756020076641438144957219387739406397111495660920822320302304854123</span>, <span class="number">45451686690348328576376896082606976500453603983712180502700202971927238065259</span>)</span><br><span class="line">(<span class="number">38726290839677684687529233274549282905118675478275260942535144771737271586397</span>, <span class="number">40829316203033016996956478373044348905634931325393076578307296318880401948880</span>)</span><br><span class="line">(<span class="number">39209612764454560795450300186392582769693156243512973558204034254768849812055</span>, <span class="number">1354495451811853700039180690705948597695565424847801455594169929311025313998</span>)</span><br><span class="line">(<span class="number">65513712517147774905818288938959930101260466094015953149923879872714745367445</span>, <span class="number">15372704507991354781967074099137226451034611060413049367266363154832614415805</span>)</span><br><span class="line">(<span class="number">15729001560566023616632342669016214191974988848807788455841465085832368458445</span>, <span class="number">16327134664007312833089147621817036851276111964898734022794700122827444854947</span>)</span><br><span class="line">(<span class="number">42181696175119369852613642818168055609726913997313538977450877772345284116500</span>, <span class="number">9844926061501886811803369928846120575402269452312877926396348651872911440254</span>)</span><br><span class="line">(<span class="number">66136301537002842836817588252827389434354772150463143258637074246966542574050</span>, <span class="number">40179237579762663098604891208246052072476264271372972425562554108399403298795</span>)</span><br><span class="line">(<span class="number">28759447425094984124057238672075080352158483766211322160596339820824930247130</span>, <span class="number">31809179023991813094371890170356817265600467849999331763205655801654108159032</span>)</span><br><span class="line">(<span class="number">46713611880672324334213026166944979498146683097425440783760089321619754080806</span>, <span class="number">23270114877894114090584274918755188867365261145736710892185678426446455871613</span>)</span><br><span class="line">(<span class="number">57079205189933243387798430767693634017842334556643904914267966016857671112460</span>, <span class="number">18247249527866143497935092319901700668290600772967638096649240924154901762810</span>)</span><br><span class="line">(<span class="number">10688647176294432598580110142909961685073598720504815121442568862023227643325</span>, <span class="number">54331697420125697460151875535555752680845260504979536685075170636565355173106</span>)</span><br><span class="line">(<span class="number">156169498993837300941969389078565637464689185713213578550979549862042014984607</span>, <span class="number">78084749496918650470984694539282818732344592856606789275489774931021007492303</span>, <span class="number">2</span>, <span class="number">59080272611010540206200716660225398487916425104605746321153704646003914371135</span>)</span><br></pre></td></tr></table></figure></p><p>这题没看，赛后复现的</p><p>参考来源：<ahref="https://tangcuxiaojikuai.xyz/post/83b88224.html#more">https://tangcuxiaojikuai.xyz/post/83b88224.html#more</a></p><p>题目分析：</p><p>已知： <span class="math display">\[\begin{align*}&amp;k_i \equiv s_i^{-1} * (h_i + x * r_i) \pmod q\\&amp;k_i \equiv s_i^{-1} * h_i +  x * r_i * s_i^{-1}\pmod q\\&amp;k_i太大了，故爆破2字节\\&amp;k_{ih} * 256^{30} + k_{il} \equiv s_i^{-1} * h_i +  x * r_i *s_i^{-1}\pmod q\\&amp;k_{il} \equiv s_i^{-1} * h_i +  x * r_i * s_i^{-1} - k_{ih} *256^{30}\pmod q\\&amp;k_{0l} \equiv s_0^{-1} * h_0 +  x * r_0 * s_0^{-1} q - k_{0h} *256^{30}\pmod q\\&amp;接下来消掉x\Rightarrow\\&amp;s_i * r_0 * k_{il} - s_0 * r_i * k_{0l} \equiv h_i * r_0 - h_0 *r_i + s_0 * r_i * k_{0h} - s_i * r_0 * k_{ih} \pmod q\end{align*}\]</span> 令<span class="math inline">\(c_i = h_i * r_0 - h_0 * r_i +s_0 * r_i * k_{0h} - s_i * r_0 * k_{ih}\)</span></p><p>从而构造如下格： <span class="math display">\[M = \begin{pmatrix}    1&amp;&amp;&amp;&amp;&amp;&amp;s_0r_1&amp;s_{0}r_2&amp;\cdots&amp;s_{0}r_{30}\\    &amp;1&amp;&amp;&amp;&amp;&amp;s_{1}r_0&amp;&amp;&amp;\\    &amp;&amp;1&amp;&amp;&amp;&amp;&amp;s_{2}r_0&amp;&amp;&amp;\\    &amp;&amp;&amp;\ddots&amp;&amp;&amp;&amp;&amp;\ddots&amp;\\    &amp;&amp;&amp;&amp;1&amp;&amp;&amp;&amp;&amp;s_{30}r_0\\    &amp;&amp;&amp;&amp;&amp;256^{30}&amp;c_1&amp;c_{2}&amp;\cdots&amp;c_{30}\\    &amp;&amp;&amp;&amp;&amp;&amp;q&amp;&amp;&amp;&amp;\\    &amp;&amp;&amp;&amp;&amp;&amp;&amp;q&amp;&amp;&amp;\\    &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;\ddots&amp;&amp;\\    &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;q\\\end{pmatrix}_{31 + 1 + 30}\]</span> 最后30列乘上<spanclass="math inline">\(2^{256}\)</span>使得到的最小向量和目标向量大小接近</p><p>得到目标向量：</p><p><span class="math inline">\((k_0, -k_1, -k_2,...,-k_{30}, 1, l_1,l_2, ..., l_{30}) * M = (k_0, -k_1, -k_2,...,-k_{30},256^{30},  0,0,...,0)\)</span></p><p>exp: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line">p, q, g, y = (<span class="number">156169498993837300941969389078565637464689185713213578550979549862042014984607</span>, <span class="number">78084749496918650470984694539282818732344592856606789275489774931021007492303</span>, <span class="number">2</span>, <span class="number">59080272611010540206200716660225398487916425104605746321153704646003914371135</span>)</span><br><span class="line">message = [<span class="string">&#x27;SDSSDASSAAASSDADSASADASSSSADDS&#x27;</span>, <span class="string">&#x27;SADADDAASSAASDSAAAAADS&#x27;</span>, <span class="string">&#x27;SSASDDDSSSSDDSDAAAAAASAASDSA&#x27;</span>, <span class="string">&#x27;SASSDSDSSSDSSDSDASADDA&#x27;</span>, <span class="string">&#x27;SDDAAASASADDAADDSSSSDASAASADSA&#x27;</span>, <span class="string">&#x27;AASADASADDSDDASADSAS&#x27;</span>, <span class="string">&#x27;DASDDDDAASADDASADAAAAAADS&#x27;</span>, <span class="string">&#x27;DSAAAASASDDDDDDSSASDADSASDDA&#x27;</span>, <span class="string">&#x27;ADSSSSAADDSDDDADAADD&#x27;</span>, <span class="string">&#x27;ASDDSADAASSASSDSDDSSD&#x27;</span>, <span class="string">&#x27;SASSDDAASDDSADSDSSDAASSAD&#x27;</span>, <span class="string">&#x27;DADSDAASAADDAAASASSSA&#x27;</span>, <span class="string">&#x27;DADDADSSDADAADSSADDADDDSSDAS&#x27;</span>, <span class="string">&#x27;AAASDSSDSAASDADDSADSDA&#x27;</span>, <span class="string">&#x27;ASDASSDSDDADADSDSDDDDADSSAADAS&#x27;</span>, <span class="string">&#x27;SDSASDADDASDASSDSAAASSASSDADA&#x27;</span>, <span class="string">&#x27;AADDSSDSDADSASDDSASSDDD&#x27;</span>, <span class="string">&#x27;SAADASAADAASDDDSASSDAASAAAS&#x27;</span>, <span class="string">&#x27;SSDDADSAADSDSSADSADSAASASDSAS&#x27;</span>, <span class="string">&#x27;DSDDAAASDDDSAASSDDDAASADSS&#x27;</span>, <span class="string">&#x27;SASSAAAAAAADSDASSDASSDAS&#x27;</span>, <span class="string">&#x27;DDDASAASDAADSSSASAAAADSDD&#x27;</span>, <span class="string">&#x27;SASADSSSAADDASADDDADD&#x27;</span>, <span class="string">&#x27;ASDDDDSDDSSSAASASDSSDDASA&#x27;</span>, <span class="string">&#x27;DSAASDSDAADAAAAASADSDDDDAAA&#x27;</span>, <span class="string">&#x27;ADSDADDDASASDSDADSADADDSASSSD&#x27;</span>, <span class="string">&#x27;ADADDASSDSDASADDSADSD&#x27;</span>, <span class="string">&#x27;SASAASDSDDASADASSSDSAAA&#x27;</span>, <span class="string">&#x27;SASDDADSSDASDDSSDSDA&#x27;</span>, <span class="string">&#x27;ADAASDSSDSDASSASADDSDDASAS&#x27;</span>, <span class="string">&#x27;AADADDSAADDDSASADASSDAADADAA&#x27;</span>]</span><br><span class="line">r = [<span class="number">59254487398967388114905667045028363843329923626238494813205814542210325221866</span>, <span class="number">7272091585909282735283006759301331954064261183899338079418296410637263888770</span>, <span class="number">6899645492048427857621143178962093646174799398991863666101058693217698732368</span>, <span class="number">25004120896291255053237639070744331951278481119827357255754648579794346195560</span>, <span class="number">2970680424634969125510981613739745658897845410407912521400879068659540408508</span>, <span class="number">54566000630497640561512172245143554745650114820675965968691149808463168361994</span>, <span class="number">75159685495692974866291952764676724718763580667689472941977359299782008334398</span>, <span class="number">20041025052466338500977838626769109456575569706600589389016534358968746705758</span>, <span class="number">70127192435034402135747706941502224672808592757766109942714487474501491910214</span>, <span class="number">9691674719110233709152049443866537766465800386755314400120771762265195237696</span>, <span class="number">71705536377844454384479609516094364197930343317149881589774662842233960882414</span>, <span class="number">52879693221782582945807231749976747516107564896599455986464226581743117039645</span>, <span class="number">77382790022991362370508965243223326049308313776687214599186184000848696471646</span>, <span class="number">56346141869522955969887972614456267251604757060687228073793419107933969328162</span>, <span class="number">13673786393914569132256858604647869957632869873889606981549833789272316263013</span>, <span class="number">64767740468987944636292946852714160626094908713011502873333251460983428727987</span>, <span class="number">3957421961183318932163297455146838208380750250268324980567615749312524020603</span>, <span class="number">26427922029900012253901950242265848521558605010629901777129266992870754082725</span>, <span class="number">41377529326816743042387061355650636824586430044255853849728865473372840135697</span>, <span class="number">25716607607446503241765016815241812755718791371526314953930748513731536667770</span>, <span class="number">19800391798756020076641438144957219387739406397111495660920822320302304854123</span>, <span class="number">38726290839677684687529233274549282905118675478275260942535144771737271586397</span>, <span class="number">39209612764454560795450300186392582769693156243512973558204034254768849812055</span>, <span class="number">65513712517147774905818288938959930101260466094015953149923879872714745367445</span>, <span class="number">15729001560566023616632342669016214191974988848807788455841465085832368458445</span>, <span class="number">42181696175119369852613642818168055609726913997313538977450877772345284116500</span>, <span class="number">66136301537002842836817588252827389434354772150463143258637074246966542574050</span>, <span class="number">28759447425094984124057238672075080352158483766211322160596339820824930247130</span>, <span class="number">46713611880672324334213026166944979498146683097425440783760089321619754080806</span>, <span class="number">57079205189933243387798430767693634017842334556643904914267966016857671112460</span>, <span class="number">10688647176294432598580110142909961685073598720504815121442568862023227643325</span>]</span><br><span class="line">s = [<span class="number">38134152657262330507433713437784426184950965354807113354631630191330303144120</span>, <span class="number">25499964678151126566605578540840513489434638253159604087981425065951344757164</span>, <span class="number">9791582686238213337967141368906212036310014918808878260483336268832064128819</span>, <span class="number">141512006531073436448016797005260994098008785866923890662245540709534244927</span>, <span class="number">21793011307831199247000930716490000926029175766326909085969585420590222327264</span>, <span class="number">14349862994826483344159692458388566295460798903541941504424537018216650283613</span>, <span class="number">70458140884809949567915541063312538538372757595177423386408938073672211639375</span>, <span class="number">65530083011107720400920780939345704754954869671333734672594688826098321351660</span>, <span class="number">57063474646503909216126596725677068514339517777473453937098665282959018241139</span>, <span class="number">62093763551744197212031574855244002702924782008725363963219173846480120194830</span>, <span class="number">77374603032347186343803094100249733360600621594214414598796066240713702791608</span>, <span class="number">1344584960351311598238142429846629993914377848692708811135221930719773821079</span>, <span class="number">43641233828500431963081402892838426285406919342406723474664571883294369141394</span>, <span class="number">76285674574149814839616688665569434237657824816977670694242559140508233840268</span>, <span class="number">55327829510120473782794486945583818434703312785066895788282945944551470490709</span>, <span class="number">13259490361346409766866273875042192439139048727072955549892484859673179719539</span>, <span class="number">26882140137481455957383933013829466811327529673163422516945649296787438630196</span>, <span class="number">69951840114040217998552588969628162605092507207522992695398095063314527794456</span>, <span class="number">11219359019456290145545276763003725218855047474525360923001515509608652449000</span>, <span class="number">28453782213087434330094261632474010077787574243224303728751260500450723227337</span>, <span class="number">45451686690348328576376896082606976500453603983712180502700202971927238065259</span>, <span class="number">40829316203033016996956478373044348905634931325393076578307296318880401948880</span>, <span class="number">1354495451811853700039180690705948597695565424847801455594169929311025313998</span>, <span class="number">15372704507991354781967074099137226451034611060413049367266363154832614415805</span>, <span class="number">16327134664007312833089147621817036851276111964898734022794700122827444854947</span>, <span class="number">9844926061501886811803369928846120575402269452312877926396348651872911440254</span>, <span class="number">40179237579762663098604891208246052072476264271372972425562554108399403298795</span>, <span class="number">31809179023991813094371890170356817265600467849999331763205655801654108159032</span>, <span class="number">23270114877894114090584274918755188867365261145736710892185678426446455871613</span>, <span class="number">18247249527866143497935092319901700668290600772967638096649240924154901762810</span>, <span class="number">54331697420125697460151875535555752680845260504979536685075170636565355173106</span>]</span><br><span class="line"></span><br><span class="line">M = matrix(ZZ,<span class="number">33</span>,<span class="number">31</span>)</span><br><span class="line">khigh = [<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">bytes</span>) <span class="keyword">for</span> <span class="built_in">bytes</span> <span class="keyword">in</span> product(<span class="string">&quot;DAS&quot;</span>, repeat=<span class="number">2</span>)]</span><br><span class="line">tmp_1 = matrix.identity(<span class="number">31</span> + <span class="number">1</span>)</span><br><span class="line">tmp_1[-<span class="number">1</span>, -<span class="number">1</span>] = <span class="number">256</span> ** <span class="number">30</span></span><br><span class="line">tmp_q = matrix.identity(<span class="number">31</span> - <span class="number">1</span>)</span><br><span class="line">tmp_q *= q</span><br><span class="line">tmp_0 = matrix.zero(<span class="number">31</span> - <span class="number">1</span>, <span class="number">31</span> + <span class="number">1</span>)</span><br><span class="line">M = tmp_1.stack(tmp_0)</span><br><span class="line"></span><br><span class="line">A = matrix(ZZ, <span class="number">31</span> + <span class="number">1</span>, <span class="number">31</span> - <span class="number">1</span>)</span><br><span class="line">h0 = <span class="built_in">int</span>(sha256(pad(message[<span class="number">0</span>].encode(), <span class="number">32</span>)).hexdigest(), <span class="number">16</span>)</span><br><span class="line"><span class="keyword">for</span> kh <span class="keyword">in</span> tqdm(khigh):</span><br><span class="line">    <span class="built_in">print</span>(kh)</span><br><span class="line">    k0h = bytes_to_long(<span class="built_in">bytes</span>([a ^^ b <span class="keyword">for</span> a, b <span class="keyword">in</span> <span class="built_in">zip</span>(kh.encode(), message[<span class="number">0</span>][:<span class="number">2</span>].encode())]))* <span class="number">256</span> ** <span class="number">30</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">31</span>):</span><br><span class="line">        hi = <span class="built_in">int</span>(sha256(pad(message[i].encode(), <span class="number">32</span>)).hexdigest(), <span class="number">16</span>)</span><br><span class="line">        kih = bytes_to_long(<span class="built_in">bytes</span>([a ^^ b <span class="keyword">for</span> a, b <span class="keyword">in</span> <span class="built_in">zip</span>(kh.encode(), message[i][:<span class="number">2</span>].encode())])) * <span class="number">256</span> ** <span class="number">30</span></span><br><span class="line">        ci = hi * r[<span class="number">0</span>] - h0 * r[i] + s[<span class="number">0</span>] * r[i] * k0h - s[i] * r[<span class="number">0</span>] * kih</span><br><span class="line">        A[<span class="number">0</span>, i - <span class="number">1</span>] = s[<span class="number">0</span>] * r[i] %q</span><br><span class="line">        A[i, i - <span class="number">1</span>] = s[i] * r[<span class="number">0</span>] %q</span><br><span class="line">        A[-<span class="number">1</span>,i - <span class="number">1</span>] = ci % q</span><br><span class="line">    tmp = A.stack(tmp_q)</span><br><span class="line">    tmp *= <span class="number">2</span> ** <span class="number">256</span></span><br><span class="line">    MM = M.augment(tmp)</span><br><span class="line">    res = MM.LLL()</span><br><span class="line">    k0l = <span class="built_in">abs</span>(res[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">    k0 = k0h + k0l</span><br><span class="line">    key = long_to_bytes(k0 ^^ bytes_to_long(pad(message[<span class="number">0</span>].encode(),<span class="number">32</span>)))</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">all</span>(j <span class="keyword">in</span> <span class="string">b&quot;DAS&quot;</span> <span class="keyword">for</span> j <span class="keyword">in</span> key)):</span><br><span class="line">        <span class="built_in">print</span>(key)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment"># AADDAASAAASSSASSDSSASSDDDSDAAASS</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建</title>
      <link href="/2024/07/16/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2024/07/16/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="准备工作">准备工作</h1><h2 id="安装git">安装Git</h2><p><a href="https://git-scm.com/">https://git-scm.com/</a></p><h2 id="安装node.js">安装Node.js</h2><p><a href="https://nodejs.org/en">https://nodejs.org/en</a></p><p>选择LTS版本</p><p>安装教程：</p><p><ahref="https://blog.csdn.net/Nicolecocol/article/details/136788200">Node.js安装及环境配置超详细教程【Windows系统】_windows安装nodejs-CSDN博客</a></p><h2 id="配置github仓库">配置Github仓库</h2><p>新建仓库为username.github.io</p><p>username即为自己github上的用户名</p><p>Emmaaaaaaaaaaaaaaaaa.github.io</p><p><del>每次打这一连串的a真是想死，心里还得数着a的数量是不是对的</del></p><p><imgsrc="https://cdn.jsdelivr.net/gh/Emmaaaaaaaaaaaaaaaaa/blog-img/image/image-20240716212629650.png" /></p><p>之后点击creat repository即可</p><h2 id="配置ssh-key">配置SSH Key</h2><p>首先点击电脑右键打开GitBash</p><h3 id="配置github账号信息">配置Github账号信息</h3><p>按如下方式设置用户名和GitHub绑定的邮箱</p><h3 id="生成shh-key">生成SHH Key</h3><p><imgsrc="https://cdn.jsdelivr.net/gh/Emmaaaaaaaaaaaaaaaaa/blog-img/image/image-20240716213026702.png" /></p><p>输入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>之后会生成一个文件夹，记事本打开该文件夹生成的id_rsa.pub文件，复制里面的内容</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Emmaaaaaaaaaaaaaaaaa/blog-img/image/image-20240716213551805.png" /></p><h3 id="添加ssh-key">添加SSH Key</h3><p>在GitHub上点击头像 ---&gt; 点击Settings ---&gt; 点击SSH and GPG keys---&gt; 点击New SSH key</p><p>把复制的东西放进去后点击Add SSH key</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Emmaaaaaaaaaaaaaaaaa/blog-img/image/image-20240716214232367.png" /></p><h1 id="建站">建站</h1><p>首先创建一个文件夹（我的命名为GHblog）</p><p>打开GitBash后cd D:</p><h2 id="安装hexo">安装Hexo</h2><p>使用命令安装hexo</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h2 id="初始化">初始化</h2><p>输入命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>可以看到该文件夹下面出现了很多东西</p><h2 id="安装相关依赖">安装相关依赖</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h2 id="生成静态网页">生成静态网页</h2><p>输入命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><h2 id="打开本地服务器进行预览">打开本地服务器进行预览</h2><p>输入命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>浏览器打开<ahref="http://localhost:4000/">http://localhost:4000/</a>即可</p><h3 id="运行准备">运行准备</h3><p>用vscode打开该文件夹</p><p>打开_config.yml文件 翻到最下方进行如下设置</p><p>这里repo的链接是 https://github.com/用户名/仓库名.git</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Emmaaaaaaaaaaaaaaaaa/blog-img/image/image-20240716220113258.png" /></p><h3 id="博客配置">博客配置</h3><p>配置博客作者的相关信息</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Emmaaaaaaaaaaaaaaaaa/blog-img/image/image-20240716222224247.png" /></p><h3 id="安装插件">安装插件</h3><p>输入命令安装deployer插件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-depolyer-git <span class="attr">--save</span></span><br></pre></td></tr></table></figure><h3 id="最后">最后</h3><p>输入命令</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo <span class="selector-tag">g</span> &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>最后出现Deploy done: git则说明上传成功</p><p>此时GitHub仓库已经加载文件，等待一会后即可查看网页</p><h1 id="常用命令">常用命令</h1><h2 id="生成静态网页-1">生成静态网页</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure><h2 id="启动本地服务器并预览网站">启动本地服务器并预览网站</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br><span class="line"><span class="comment"># or </span></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><h2 id="清除缓存文件">清除缓存文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><h2 id="新建一篇文章">新建一篇文章</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;title&quot;</span></span><br></pre></td></tr></table></figure><h2 id="删除一篇已经发布的文章">删除一篇已经发布的文章</h2><ol type="1"><li>删除文件夹<code>source/_posts</code>下目标文章markdown文件</li><li>删除<code>.deploy_git</code>文件夹</li><li>执行<code>hexo clean</code>后，再执行<code>hexo g &amp;&amp; hexo d</code>即可</li></ol><blockquote><p>原因分析：</p><p>因为在本地在执行hexog后，会在博客根目录下生成一个public文件夹，这个文件夹里的文件组合起来就是一个完整的静态博客。</p><p>接着如果执行hexod，就会把这个public文件夹的东西完完整整地拷贝到.deploy_git文件夹里，并把该文件夹里的所有文件全部推送push到远程库。</p><p>xxxxxxxxxx43 1from itertools import product2from Crypto.Util.Paddingimport pad3from hashlib import <em>4from Crypto.Util.number import</em>5from tqdm import tqdm6​7p, q, g, y =(156169498993837300941969389078565637464689185713213578550979549862042014984607,78084749496918650470984694539282818732344592856606789275489774931021007492303,2,59080272611010540206200716660225398487916425104605746321153704646003914371135)8message= ['SDSSDASSAAASSDADSASADASSSSADDS', 'SADADDAASSAASDSAAAAADS','SSASDDDSSSSDDSDAAAAAASAASDSA', 'SASSDSDSSSDSSDSDASADDA','SDDAAASASADDAADDSSSSDASAASADSA', 'AASADASADDSDDASADSAS','DASDDDDAASADDASADAAAAAADS', 'DSAAAASASDDDDDDSSASDADSASDDA','ADSSSSAADDSDDDADAADD', 'ASDDSADAASSASSDSDDSSD','SASSDDAASDDSADSDSSDAASSAD', 'DADSDAASAADDAAASASSSA','DADDADSSDADAADSSADDADDDSSDAS', 'AAASDSSDSAASDADDSADSDA','ASDASSDSDDADADSDSDDDDADSSAADAS', 'SDSASDADDASDASSDSAAASSASSDADA','AADDSSDSDADSASDDSASSDDD', 'SAADASAADAASDDDSASSDAASAAAS','SSDDADSAADSDSSADSADSAASASDSAS', 'DSDDAAASDDDSAASSDDDAASADSS','SASSAAAAAAADSDASSDASSDAS', 'DDDASAASDAADSSSASAAAADSDD','SASADSSSAADDASADDDADD', 'ASDDDDSDDSSSAASASDSSDDASA','DSAASDSDAADAAAAASADSDDDDAAA', 'ADSDADDDASASDSDADSADADDSASSSD','ADADDASSDSDASADDSADSD', 'SASAASDSDDASADASSSDSAAA','SASDDADSSDASDDSSDSDA', 'ADAASDSSDSDASSASADDSDDASAS','AADADDSAADDDSASADASSDAADADAA']9r =[59254487398967388114905667045028363843329923626238494813205814542210325221866,7272091585909282735283006759301331954064261183899338079418296410637263888770,6899645492048427857621143178962093646174799398991863666101058693217698732368,25004120896291255053237639070744331951278481119827357255754648579794346195560,2970680424634969125510981613739745658897845410407912521400879068659540408508,54566000630497640561512172245143554745650114820675965968691149808463168361994,75159685495692974866291952764676724718763580667689472941977359299782008334398,20041025052466338500977838626769109456575569706600589389016534358968746705758,70127192435034402135747706941502224672808592757766109942714487474501491910214,9691674719110233709152049443866537766465800386755314400120771762265195237696,71705536377844454384479609516094364197930343317149881589774662842233960882414,52879693221782582945807231749976747516107564896599455986464226581743117039645,77382790022991362370508965243223326049308313776687214599186184000848696471646,56346141869522955969887972614456267251604757060687228073793419107933969328162,13673786393914569132256858604647869957632869873889606981549833789272316263013,64767740468987944636292946852714160626094908713011502873333251460983428727987,3957421961183318932163297455146838208380750250268324980567615749312524020603,26427922029900012253901950242265848521558605010629901777129266992870754082725,41377529326816743042387061355650636824586430044255853849728865473372840135697,25716607607446503241765016815241812755718791371526314953930748513731536667770,19800391798756020076641438144957219387739406397111495660920822320302304854123,38726290839677684687529233274549282905118675478275260942535144771737271586397,39209612764454560795450300186392582769693156243512973558204034254768849812055,65513712517147774905818288938959930101260466094015953149923879872714745367445,15729001560566023616632342669016214191974988848807788455841465085832368458445,42181696175119369852613642818168055609726913997313538977450877772345284116500,66136301537002842836817588252827389434354772150463143258637074246966542574050,28759447425094984124057238672075080352158483766211322160596339820824930247130,46713611880672324334213026166944979498146683097425440783760089321619754080806,57079205189933243387798430767693634017842334556643904914267966016857671112460,10688647176294432598580110142909961685073598720504815121442568862023227643325]10s=[38134152657262330507433713437784426184950965354807113354631630191330303144120,25499964678151126566605578540840513489434638253159604087981425065951344757164,9791582686238213337967141368906212036310014918808878260483336268832064128819,141512006531073436448016797005260994098008785866923890662245540709534244927,21793011307831199247000930716490000926029175766326909085969585420590222327264,14349862994826483344159692458388566295460798903541941504424537018216650283613,70458140884809949567915541063312538538372757595177423386408938073672211639375,65530083011107720400920780939345704754954869671333734672594688826098321351660,57063474646503909216126596725677068514339517777473453937098665282959018241139,62093763551744197212031574855244002702924782008725363963219173846480120194830,77374603032347186343803094100249733360600621594214414598796066240713702791608,1344584960351311598238142429846629993914377848692708811135221930719773821079,43641233828500431963081402892838426285406919342406723474664571883294369141394,76285674574149814839616688665569434237657824816977670694242559140508233840268,55327829510120473782794486945583818434703312785066895788282945944551470490709,13259490361346409766866273875042192439139048727072955549892484859673179719539,26882140137481455957383933013829466811327529673163422516945649296787438630196,69951840114040217998552588969628162605092507207522992695398095063314527794456,11219359019456290145545276763003725218855047474525360923001515509608652449000,28453782213087434330094261632474010077787574243224303728751260500450723227337,45451686690348328576376896082606976500453603983712180502700202971927238065259,40829316203033016996956478373044348905634931325393076578307296318880401948880,1354495451811853700039180690705948597695565424847801455594169929311025313998,15372704507991354781967074099137226451034611060413049367266363154832614415805,16327134664007312833089147621817036851276111964898734022794700122827444854947,9844926061501886811803369928846120575402269452312877926396348651872911440254,40179237579762663098604891208246052072476264271372972425562554108399403298795,31809179023991813094371890170356817265600467849999331763205655801654108159032,23270114877894114090584274918755188867365261145736710892185678426446455871613,18247249527866143497935092319901700668290600772967638096649240924154901762810,54331697420125697460151875535555752680845260504979536685075170636565355173106]11​12M= matrix(ZZ,33,31)13khigh = [''.join(bytes) for bytes in product("DAS",repeat=2)]14tmp_1 = matrix.identity(31 + 1)15tmp_1[-1, -1] = 256 **3016tmp_q = matrix.identity(31 - 1)17tmp_q <em>= q18tmp_0 =matrix.zero(31 - 1, 31 + 1)19M = tmp_1.stack(tmp_0)20​21A = matrix(ZZ, 31+ 1, 31 - 1)22h0 = int(sha256(pad(message[0].encode(), 32)).hexdigest(),16)23for kh in tqdm(khigh):24    print(kh)25    k0h =bytes_to_long(bytes([a ^^ b for a, b in zip(kh.encode(),message[0][:2].encode())]))</em> 256 ** 3026    for i in range(1, 31):27       hi = int(sha256(pad(message[i].encode(), 32)).hexdigest(), 16)28       kih = bytes_to_long(bytes([a ^^ b for a, b in zip(kh.encode(),message[i][:2].encode())])) * 256 ** 3029        ci = hi * r[0] - h0 *r[i] + s[0] * r[i] * k0h - s[i] * r[0] * kih30        A[0, i - 1] = s[0]* r[i] %q31        A[i, i - 1] = s[i] * r[0] %q32        A[-1,i - 1] =ci % q33    tmp = A.stack(tmp_q)34    tmp *= 2 ** 25635    MM =M.augment(tmp)36    res = MM.LLL()37    k0l = abs(res[0][0])38    k0 =k0h + k0l39    key = long_to_bytes(k0 ^^bytes_to_long(pad(message[0].encode(),32)))40    if (all(j in b"DAS" forj in key)):41        print(key)42        break43#AADDAASAAASSSASSDSSASSDDDSDAAASSpython</p><p>markdown文章在之前的hexog之后，把生成的静态文件拷贝到了.deploy_git文件，但hexoclean并没能删除·.deploy_git·里的markdown的静态文件，所以每次部署的时候，它还会冒出来。</p><p>所以同时删掉.deploy_git文件夹即可。</p></blockquote><h1 id="安装和美化bufferfly主题">安装和美化Bufferfly主题</h1><h2 id="安装">安装</h2><ol type="1"><li><p>打开GitBash使用命令安装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure></li><li><p>下载pug以及stylus的渲染器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure></li><li><p>设置默认主题</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Emmaaaaaaaaaaaaaaaaa/blog-img/image/image-20240716221313385.png" /></p></li></ol><h2 id="美化">美化</h2><h3 id="添加博客的page">添加博客的page</h3><p>直接在vscode中打开终端运行</p><h4 id="新建标签tags页面">新建标签tags页面</h4><p>输入命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;tags&quot;</span></span><br></pre></td></tr></table></figure><p>打开文件夹进行如下修改</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Emmaaaaaaaaaaaaaaaaa/blog-img/image/image-20240716222848270.png" /></p><h4 id="新建分类categories页面">新建分类categories页面</h4><p>输入命令</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;categories&quot;</span><br></pre></td></tr></table></figure><p>打开文件夹进行如下修改</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Emmaaaaaaaaaaaaaaaaa/blog-img/image/image-20240716223035149.png" /></p><h4 id="新建关于about页面">新建关于about页面</h4><p>输入命令</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;about&quot;</span><br></pre></td></tr></table></figure><p>打开文件夹进行如下修改</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Emmaaaaaaaaaaaaaaaaa/blog-img/image/image-20240716223155909.png" /></p><h4 id="新建友链-link-页面">新建友链 link 页面</h4><p>输入命令</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;link&quot;</span><br></pre></td></tr></table></figure><p>打开文件夹进行如下修改</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Emmaaaaaaaaaaaaaaaaa/blog-img/image/image-20240716223317861.png" /></p><h4 id="创建友链内容">创建友链内容</h4><p>在GHblog文件夹中的 source/_data（如果没有 _data文件夹，请自行创建），创建一个文件 link.yml</p><p>输入以下内容</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">- class_name: 友情链接</span><br><span class="line">  class_desc: 那些人，那些事</span><br><span class="line">  link_list:</span><br><span class="line">    - name: Hexo</span><br><span class="line">      link: https://hexo.io/zh-tw/</span><br><span class="line">      avatar: https://d33wubrfki0l68.cloudfront.net/<span class="number">6657</span>ba50e702d84afb32fe846bed54fba1a77add/<span class="number">827</span>ae/logo.svg</span><br><span class="line">      descr: 快速、简单且强大的网誌框架</span><br><span class="line"></span><br><span class="line">- class_name: 网站</span><br><span class="line">  class_desc: 值得推荐的网站</span><br><span class="line">  link_list:</span><br><span class="line">    - name: Laohoo @gitee.io</span><br><span class="line">      link: https://hujiyi.gitee.io/</span><br><span class="line">      avatar: https://i.loli.net/<span class="number">2020</span>/<span class="number">05</span>/<span class="number">14</span>/<span class="number">9</span>ZkGg8v3azHJfM1.png</span><br><span class="line">      descr: 博客网站</span><br><span class="line">    - name: Weibo</span><br><span class="line">      link: https://www.weibo.com/</span><br><span class="line">      avatar: https://i.loli.net/<span class="number">2020</span>/<span class="number">05</span>/<span class="number">14</span>/TLJBum386vcnI1P.png</span><br><span class="line">      descr: 中国最大社交分享平台</span><br><span class="line">    - name: Twitter</span><br><span class="line">      link: https://twitter.com/</span><br><span class="line">      avatar: https://i.loli.net/<span class="number">2020</span>/<span class="number">05</span>/<span class="number">14</span>/<span class="number">5</span>VyHPQqR6LWF39a.png</span><br><span class="line">      descr: 社交分享平台</span><br></pre></td></tr></table></figure><h3 id="配置主题">配置主题</h3><p>在HGblog的根目录里创建一个文件<code>_config.butterfly.yml</code>，并把主题目录的<code>themes/butterfly/_config.yml</code> 内容复制到<code>_config.butterfly.yml</code> 去</p><blockquote><p>PS：不要把_config.yml删掉</p><p>PS：以后只需要在config.butterfly.yml中配置就行。如果使用了_config.butterfly.yml， 配置主题的 themes/butterfly/config.yml将不会有效果。</p><p>PS：Hexo会自动合并主题中的themes/butterfly/config.yml 和_config.butterfly.yml里的配置，如果存在同名配置，会使用config.butterfly.yml的配置，其优先度较高</p></blockquote><h3 id="搜索功能">搜索功能</h3><ol type="1"><li><p>安装搜索插件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add hexo-generator-search</span><br></pre></td></tr></table></figure></li><li><p>编辑 <code>_config.butterfly.yml</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true    # 改为 true</span><br></pre></td></tr></table></figure></li></ol><h3 id="字数统计功能">字数统计功能</h3><ol type="1"><li><p>安装字数统计插件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add hexo-wordcount</span><br></pre></td></tr></table></figure></li><li><p>编辑 <code>_config.butterfly.yml</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># wordcount (字數統計)</span><br><span class="line">wordcount:</span><br><span class="line">  enable: true    # 改为 true</span><br><span class="line">  post_wordcount: true</span><br><span class="line">  min2read: true</span><br><span class="line">  total_wordcount: true</span><br></pre></td></tr></table></figure></li></ol><h3 id="gitalk评论功能">Gitalk评论功能</h3><p>在GitHub上点击头像 ---&gt; 点击Settings ---&gt; 点击Developersettings ---&gt; 点击Register a new GitHub App</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/Emmaaaaaaaaaaaaaaaaa/blog-img/image/image-20240717100812782.png"alt="image-20240717100812782" /><figcaption aria-hidden="true">image-20240717100812782</figcaption></figure><p>完成后会生成相应的 <code>clientID</code> 和<code>clientSecret</code></p><p>打开 <code>_config.butterfly.yml</code> , 找到<code># Comments System</code>，进行修改如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Comments System</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="comment"># Up to two comments system, the first will be shown as default</span></span><br><span class="line">  <span class="comment"># Choose: Disqus/Disqusjs/Livere/Gitalk/Valine/Waline/Utterances/Facebook Comments/Twikoo/Giscus/Remark42/Artalk</span></span><br><span class="line">  <span class="attr">use:</span> <span class="comment"># Valine,Disqus</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">Gitalk</span></span><br><span class="line">  <span class="attr">text:</span> <span class="literal">true</span> <span class="comment"># Display the comment name next to the button</span></span><br><span class="line">  <span class="comment"># lazyload: The comment system will be load when comment element enters the browser&#x27;s viewport.</span></span><br><span class="line">  <span class="comment"># If you set it to true, the comment count will be invalid</span></span><br><span class="line">  <span class="attr">lazyload:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">count:</span> <span class="literal">true</span> <span class="comment"># Display comment count in post&#x27;s top_img</span></span><br><span class="line">  <span class="attr">card_post_count:</span> <span class="literal">true</span> <span class="comment"># Display comment count in Home Page</span></span><br></pre></td></tr></table></figure><p>继续在 <code>_config.butterfly.yml</code>中 , 找到<code># gitalk</code>，进行修改如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gitalk</span></span><br><span class="line"><span class="comment"># https://github.com/gitalk/gitalk</span></span><br><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">  <span class="attr">client_id:</span> <span class="string">Ov************</span> <span class="comment"># GitHub Application Client ID</span></span><br><span class="line">  <span class="attr">client_secret:</span> <span class="string">0e*****************************</span> <span class="comment"># GitHub Application Client Secret</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">blog_comments</span> <span class="comment"># GitHub repository (这里要新建一个仓库)</span></span><br><span class="line">  <span class="attr">owner:</span> <span class="string">Emmaaaaaaaaaaaaaaaaa</span> <span class="comment"># GitHub repository 所有者</span></span><br><span class="line">  <span class="attr">admin:</span> <span class="string">Emmaaaaaaaaaaaaaaaaa</span> <span class="comment"># GitHub repository 的所有者和合作者 (对这个 repository 有写权限的用户)</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">zh-CN</span> <span class="comment"># en, zh-CN, zh-TW, es-ES, fr, ru</span></span><br><span class="line">  <span class="attr">perPage:</span> <span class="number">10</span> <span class="comment"># Pagination size, with maximum 100.</span></span><br><span class="line">  <span class="attr">distractionFreeMode:</span> <span class="literal">false</span> <span class="comment"># Facebook-like distraction free mode.</span></span><br><span class="line">  <span class="attr">pagerDirection:</span> <span class="string">last</span> <span class="comment"># Comment sorting direction, available values are last and first.</span></span><br><span class="line">  <span class="attr">createIssueManually:</span> <span class="literal">false</span> <span class="comment"># Gitalk will create a corresponding github issue for your every single page automatically</span></span><br></pre></td></tr></table></figure><h3 id="字体配置">字体配置</h3><p>我自己用的是霞鹜文楷</p><p>字体下载地址</p><p><a href="https://github.com/lxgw/LxgwWenKaiGB/releases">Releases ·lxgw/LxgwWenkaiGB (github.com)</a></p><p>下载的是下面这个（不过感觉和Light没什么差别，也没有看到加粗效果啊）</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Emmaaaaaaaaaaaaaaaaa/blog-img/image/image-20240717081822829.png" /></p><p>下载好之后我们继续来到GHblog文件夹里，这时需要自己建一个<code>css</code>文件，在<code>themes\butterfly\source\css</code>文件夹中新建一个<code>css</code>文件，命名为<code>custom.css</code>（可随意命名）</p><p>往里面放入以下代码（<code>wenkai</code>只是别名，可以任意修改，不过引用的时候，要确保名字相同）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;wenkai&#x27;</span>;</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;https://cdn.jsdelivr.net/gh/Emmaaaaaaaaaaaaaaaaa/attachments/LXGWWenKaiMonoGBLite-Bold.ttf&#x27;</span>);</span><br><span class="line">    <span class="comment">/* 修改成你的字体 */</span></span><br><span class="line">    <span class="attribute">font-display</span>: swap</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: wenkai <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里利用了<code>jsdelivr</code>的加速方式（该加速方式写在后面，可跳转到最下面）</p><p>最后在<code>_config.butterfly.yml</code>里面进行如下修改</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn<span class="selector-class">.jsdelivr</span><span class="selector-class">.net</span>/gh/Emmaaaaaaaaaaaaaaaaa/attachments/custom<span class="selector-class">.css</span>&quot; media=&quot;defer&quot; onload=&quot;this<span class="selector-class">.media</span>=&#x27;<span class="attribute">all</span>&#x27;&quot;&gt;</span><br></pre></td></tr></table></figure><p><code>href</code>这里也采用<code>jsdelivr</code>加速方式，<code>media="defer" onload="this.media='all'"</code>这个只是 css 的异步加载，也可以不写</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/Emmaaaaaaaaaaaaaaaaa/blog-img/image/image-20240717084012664.png"alt="image-20240717084012664" /><figcaption aria-hidden="true">image-20240717084012664</figcaption></figure><h3 id="代码框">代码框</h3><p>在<code>_config.butterfly.yml</code>找到<code>Code Blocks</code>，有多种模式可以选择，我选的<code>mac</code></p><figure><imgsrc="https://cdn.jsdelivr.net/gh/Emmaaaaaaaaaaaaaaaaa/blog-img/image/image-20240717084353118.png"alt="image-20240717084353118" /><figcaption aria-hidden="true">image-20240717084353118</figcaption></figure><h3 id="头像修改">头像修改</h3><p>在<code>_config.butterfly.yml</code>进行修改如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Avatar (頭像)</span><br><span class="line">avatar:</span><br><span class="line">  img: https://cdn.jsdelivr.net/gh/Emmaaaaaaaaaaaaaaaaa/blog-img/image/logo.jpg</span><br><span class="line">  effect: false</span><br></pre></td></tr></table></figure><p>直接用PicGo就行啦</p><h3 id="浏览器头像修改">浏览器头像修改</h3><p>头像图片用在线网站转成32*32像素的即可，然后在<code>_config.butterfly.yml</code>中找到<code>favicon</code>进行修改如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">favicon: https://cdn.jsdelivr.net/gh/Emmaaaaaaaaaaaaaaaaa/blog-img/image/safeimagekit-logo.jpg</span><br></pre></td></tr></table></figure><p>效果如下</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Emmaaaaaaaaaaaaaaaaa/blog-img/image/image-20240717092725614.png" /></p><h3 id="背景设置修改">背景设置修改</h3><p>为了不让看起来更简单一些，我把背景关掉了</p><p>在<code>_config.butterfly.yml</code>进行修改如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Disable <span class="attribute">all</span> banner <span class="selector-tag">image</span></span><br><span class="line">disable_top_img: true</span><br></pre></td></tr></table></figure><h3 id="社交图标">社交图标</h3><p>在<code>_config.butterfly.yml</code>进行修改如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">social:</span><br><span class="line">  fab fa-github: https://github.com/Emmaaaaaaaaaaaaaaaaa || Github || <span class="string">&#x27;#24292e&#x27;</span></span><br><span class="line">  fas fa-envelope: mailto: 自己的邮箱号 || Email || <span class="string">&#x27;#4a7dbe&#x27;</span></span><br></pre></td></tr></table></figure><p>效果如下 <imgsrc="https://cdn.jsdelivr.net/gh/Emmaaaaaaaaaaaaaaaaa/blog-img/image/image-20240717093155018.png"alt="image-20240717093155018" /></p><h3 id="字体大小">字体大小</h3><p>感觉字体有点小了，故进行了如下修改 （原来字体大小是14px）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font</span>:</span><br><span class="line">  global-font-size: <span class="number">15px</span></span><br><span class="line">  code-font-size: <span class="number">14px</span></span><br><span class="line">  font-family:</span><br><span class="line">  code-font-family:</span><br></pre></td></tr></table></figure><h3 id="透明度修改">透明度修改</h3><p>在<code>custom.css</code>中添加如下内容</p><p>设置的透明度越高 页面越不透明</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 文章页背景 */</span></span><br><span class="line"><span class="selector-class">.layout_post</span>&gt;<span class="selector-id">#post</span> &#123;</span><br><span class="line">    <span class="comment">/* 以下代表透明度为0.5 可以自行修改*/</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,.<span class="number">9</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 所有页面背景 */</span></span><br><span class="line"><span class="selector-id">#aside_content</span> <span class="selector-class">.card-widget</span>, <span class="selector-id">#recent-posts</span>&gt;<span class="selector-class">.recent-post-item</span>, <span class="selector-class">.layout_page</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:first-child</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.recent-posts</span>), <span class="selector-class">.layout_post</span>&gt;<span class="selector-id">#page</span>, <span class="selector-class">.layout_post</span>&gt;<span class="selector-id">#post</span>, <span class="selector-class">.read-mode</span> <span class="selector-class">.layout_post</span>&gt;<span class="selector-id">#post</span>&#123;</span><br><span class="line">    <span class="comment">/* 以下代表透明度为0.5 */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,.<span class="number">9</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="jsdelivr和github的结合">jsdelivr和github的结合</h1><h2 id="jsdelivr加速">jsdelivr加速</h2><p>具体操作过程如下 新建一个GitHub仓库，仓库名称自己命名（Repositoryname）</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/Emmaaaaaaaaaaaaaaaaa/blog-img/image/image-20240717082833326.png"alt="image-20240717082833326" /><figcaption aria-hidden="true">image-20240717082833326</figcaption></figure><p>在这个仓库中上传要CDN的文件，如CSS，JS，图片等</p><p>上传成功后点击<code>Creat a new release</code></p><figure><imgsrc="https://cdn.jsdelivr.net/gh/Emmaaaaaaaaaaaaaaaaa/blog-img/image/image-20240717083216321.png"alt="image-20240717083216321" /><figcaption aria-hidden="true">image-20240717083216321</figcaption></figure><p>之后输入自定义版本号</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/Emmaaaaaaaaaaaaaaaaa/blog-img/image/image-20240717083409900.png"alt="image-20240717083409900" /><figcaption aria-hidden="true">image-20240717083409900</figcaption></figure><p>成功之后即可使用<code>jsdelivr</code>来引用资源</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径</span><br><span class="line"># 例如</span><br><span class="line">https://cdn.jsdelivr.net/gh/Emmaaaaaaaaaaaaaaaaa/attachments@<span class="number">1.0</span>/LXGWWenKaiMonoGBLite-Bold.ttf</span><br></pre></td></tr></table></figure><p>如果不需要版本号区分，也可以直接：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/Emmaaaaaaaaaaaaaaaaa/attachments/LXGWWenKaiMonoGBLite-Bold.ttf</span><br></pre></td></tr></table></figure><h2 id="利用jsdelivr搭建图床">利用jsdelivr搭建图床</h2><ol type="1"><li><p>再次新建一个仓库，专门用来存放上传的图片</p></li><li><p>在GitHub上点击头像 ---&gt; 点击Settings ---&gt; 点击Developersettings ---&gt; 点击Personal access tokens ---&gt; 点击Tokens(classic)---&gt; 点击Generate new token ---&gt;</p><p><ahref="https://blog.csdn.net/weixin_44786530/article/details/129851540">jsDelivr和Github配合才是最佳免费CDN，五分钟学会使用，附搭建免费图床教程_jsdelivr怎么用-CSDN博客</a></p><p>通过这篇文章来进行配置</p></li><li><p>完成这些步骤后会生成一串token，这串token之后不会再显示，所以第一次看到的时候，可以建个文本文件好好保存，忘记了只有重新生成，每次都不一样</p></li><li><p>PicGo工具的下载和配置</p><p>下载该工具并且安装完成后打开它，设定仓库名按照<code>账户名/仓库名</code>的格式进行填写（这里我又新建了一个仓库，并且命名为<code>blog-img</code>）在该仓库里面我新建了一个<code>image</code>文件夹，所以存储路径那里我是像下面这样设置的</p><p><code>设定token</code>中填写上面生成的那串<code>token</code>即可</p><p><code>设定分支名</code>这里看自己建的仓库里面的分支名是什么（有的人设置的是master，有的人设置的是main，按照对应的填写即可）</p><p><code>自定义域名</code>的作用是在上传图片后成功后，图片上传工具PicGo会将<code>自定义域名+上传的图片名</code>生成相应的访问链接</p><p>为了加速访问，我们将自定义域名设置成下面这种格式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/账户名/仓库名</span><br><span class="line"># 例如</span><br><span class="line">https://cdn.jsdelivr.net/gh/Emmaaaaaaaaaaaaaaaaa/blog-img</span><br></pre></td></tr></table></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/Emmaaaaaaaaaaaaaaaaa/blog-img/image/image-20240717090022465.png"alt="image-20240717090022465" /><figcaption aria-hidden="true">image-20240717090022465</figcaption></figure><p>修改PicGo设置开启上传提示，这样上传成功后会后提示</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/Emmaaaaaaaaaaaaaaaaa/blog-img/image/image-20240717091027876.png"alt="image-20240717091027876" /><figcaption aria-hidden="true">image-20240717091027876</figcaption></figure><p>在上传区选择GitHub图床，将需要上传的图片拖拽到上传区，图片就会自动上传到GitHub中相应的文件夹下</p><p>最后将GitHub中图片链接的地址，替换为当前新的图片链接地址，这样图片就可以正常显示了（比如下面生成的头像）</p></li></ol><h1 id="问题">问题</h1><h2 id="first">first</h2><figure><imgsrc="https://cdn.jsdelivr.net/gh/Emmaaaaaaaaaaaaaaaaa/blog-img/image/image-20240717102412686.png"alt="image-20240717102412686" /><figcaption aria-hidden="true">image-20240717102412686</figcaption></figure><p>解决：首先把<code>.deploy_git</code>包删了重新执行<code>npm install hexo-deployer-git</code>命令下载发布插件，然后再<code>hexo g &amp;&amp; hexo d</code></p><h1 id="reference">Reference</h1><p><ahref="https://blog.csdn.net/ingenuou_/article/details/107452638">删除github上的一个仓库或者仓库里面的某个文件_github仓库删除一个文件好麻烦-CSDN博客</a></p><p><ahref="https://blog.imzjw.cn/posts/b74f504f/index.html">https://blog.imzjw.cn/posts/b74f504f/index.html</a><ahref="https://blog.csdn.net/JesseXW/article/details/135649752">https://blog.csdn.net/JesseXW/article/details/135649752</a><ahref="https://akilar.top/posts/ebf20e02/">https://akilar.top/posts/ebf20e02/</a><ahref="https://cloud.tencent.com/developer/article/1819036">https://cloud.tencent.com/developer/article/1819036</a><ahref="https://hujiyi.github.io/2021/11/15/hexo-with-butterfly/index.html">https://hujiyi.github.io/2021/11/15/hexo-with-butterfly/index.html</a><ahref="https://orientalglass.github.io/2023/08/22/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/">https://orientalglass.github.io/2023/08/22/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</a><ahref="https://blog.csdn.net/qq_34243930/article/details/109046120">https://blog.csdn.net/qq_34243930/article/details/109046120</a><ahref="https://butterfly.js.org/posts/4aa8abbe/">https://butterfly.js.org/posts/4aa8abbe/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/07/13/hello-world/"/>
      <url>/2024/07/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <ahref="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <ahref="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
